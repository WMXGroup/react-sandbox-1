{"version":3,"sources":["components/TreeTest6.js","App.js","index.js"],"names":["localStorage","getItem","setItem","JSON","stringify","name","id","selected","subOptions","myTreeData","parse","styles","addNode","backgroundColor","color","addSubButton","deleteSubButton","TreeTest","state","options","selectedFile","downloadFile","content","fileName","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","exportJSON","_this","getFile","e","files","target","reader","FileReader","readAsText","onload","console","log","result","setState","newData","_this2","this","react_default","onChange","accept","onClick","TreeTest6_OptionsList","textChange","React","Component","OptionsList","props","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLastNew","textInput","_this4","_this$props","i","length","push","createRef","handleSubOptionsTextChange","optionName","uuidv4","Math","random","toString","substring","Date","now","handleAdd","index","newOption","splice","getNodeCount","optionId","optionCount","map","option","TreeTest6_TextNode","label","handleCheckboxClicked","handleTextChange","event","newValue","handleChange","value","handleAddSub","newSubOption","handleDelete","handleReturn","key","undefined","current","focus","myRef","isMaxNew","nodeCount","TextNode","_this$props2","Fragment","style","checked","onKeyPress","ref","App","count","TreeTest6","ReactDOM","render","src_App","getElementById"],"mappings":"uKAIwB,OAFCA,aAAaC,QAAQ,eAG5CD,aAAaE,QAAQ,aAAcC,KAAKC,UAAU,CAChD,CACIC,KAAM,aACNC,GAAI,EACJC,UAAU,EACVC,WAAY,OAMpB,IAAMC,EAAaN,KAAKO,MAAMV,aAAaC,QAAQ,eAE7CU,EAAS,CACbC,QAAS,CACPC,gBAAgB,aAChBC,MAAM,SAERC,aAAc,CACZF,gBAAgB,cAChBC,MAAM,SAERE,gBAAgB,CACdH,gBAAiB,YACjBC,MAAO,UASLG,6MACJC,MAAQ,CACNC,QAASV,EACTW,aAAc,QAGhBC,aAAe,SAACC,EAASC,EAAUC,GACjC,IAAMC,EAAIC,SAASC,cAAc,KAC3BC,EAAO,IAAIC,KAAK,CAACP,GAAU,CAAEQ,KAAMN,IACzCC,EAAEM,KAAOC,IAAIC,gBAAgBL,GAC7BH,EAAES,SAAWX,EACbE,EAAEU,WAGJC,WAAa,WACXC,EAAKhB,aAAalB,KAAKC,UAAUiC,EAAKnB,MAAMC,SAAU,YAAa,iBAGrEmB,QAAU,SAACC,GACT,IAAIC,EAAQD,EAAEE,OAAOD,MACjBE,EAAS,IAAIC,WACjBD,EAAOE,WAAWJ,EAAM,IAExBE,EAAOG,OAAS,SAAAN,GACdO,QAAQC,IAAIR,EAAEE,OAAOO,QACrBhD,aAAaE,QAAQ,aAAcqC,EAAEE,OAAOO,QAC5CX,EAAKY,SAAS,CACZ9B,QAAShB,KAAKO,MAAM6B,EAAEE,OAAOO,oFAK1B,IArCQE,EAqCRC,EAAAC,KAIN,OAzCcF,EAuCLE,KAAKlC,MAAMC,QAtCvBnB,aAAaE,QAAQ,aAAcC,KAAKC,UAAU8C,IAyC7CG,EAAA5B,EAAAE,cAAA,WACE0B,EAAA5B,EAAAE,cAAA,WACC0B,EAAA5B,EAAAE,cAAA,4CAED0B,EAAA5B,EAAAE,cAAA,WACE0B,EAAA5B,EAAAE,cAAA,SAAOG,KAAK,OAAOzB,KAAK,OAAOiD,SAAUF,KAAKd,QAASiB,OAAO,WAEhEF,EAAA5B,EAAAE,cAAA,UACC6B,QAAS,kBAAML,EAAKf,eADrB,eAIAiB,EAAA5B,EAAAE,cAAA,qBACA0B,EAAA5B,EAAAE,cAAC8B,EAAD,CACEtC,QAASiC,KAAKlC,MAAMC,QACpBuC,WAAY,SAACvC,GAAD,OAAagC,EAAKF,SAAS,CAAC9B,uBAnD5BwC,IAAMC,WA0DvBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAS,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAhB,KAAMU,KAIR5C,MAAQ,CACNmD,WAAY,GAJZN,EAAKO,UAAY,GAFAP,wEASX,IAAAQ,EAAAnB,KAAAoB,EAC0BpB,KAAKU,MAA7B3C,EADFqD,EACErD,QAASuC,EADXc,EACWd,WAEjBN,KAAKkB,UAAY,GAEjB,IAAI,IAAIG,EAAE,EAAGA,EAAEtD,EAAQuD,OAAQD,IAC7BrB,KAAKkB,UAAUK,KAAKhB,IAAMiB,aAE5B,IAmBMC,EAA6B,SAACC,EAAYtE,GAC9CW,EAAQ2D,GAActE,EACtBkD,EAAWvC,IAGP4D,EAAS,WACb,OAAOC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAKC,KAAKC,MAAMH,SAAS,KAGjEI,EAAY,SAACC,GACjB,IAAMC,EAAY,CAChBnF,KAAK,GACLC,GAAIyE,IACJvE,WAAY,IAEdW,EAAQsE,OAAOF,EAAM,EAAG,EAAGC,GAC3B9B,EAAWvC,IA2CPuE,EAAe,SAACC,GAEpB,IADA,IAAIC,EAAc,EACVnB,EAAE,EAAEA,EAAEtD,EAAQuD,OAAOD,IACxBtD,EAAQsD,GAAGnE,KAAOqF,IACnBC,EAAczE,EAAQsD,GAAGjE,WAAWkE,QAGxC,OAAOkB,GAGT,OACEvC,EAAA5B,EAAAE,cAAA,WACCR,EAAQ0E,IAAI,SAACC,EAAQP,GACpB,OACAlC,EAAA5B,EAAAE,cAAA,UACE0B,EAAA5B,EAAAE,cAACoE,EAAD,CACExF,SAAUuF,EAAOvF,SACjByF,MAAOF,EAAOzF,KACdiD,SAAU,kBAhGY,SAACqC,GAC7B,IAAI,IAAIlB,EAAE,EAAEA,EAAEtD,EAAQuD,OAAOD,IACxBtD,EAAQsD,GAAGnE,KAAOqF,IACnBxE,EAAQsD,GAAGlE,UAAYY,EAAQsD,GAAGlE,UAGtCmD,EAAWvC,GA0FW8E,CAAsBH,EAAOxF,KAC7C4F,iBAAkB,SAACC,GAAD,OAvFL,SAACC,EAAUT,GAC9B,IAAI,IAAIlB,EAAE,EAAEA,EAAEtD,EAAQuD,OAAOD,IACxBtD,EAAQsD,GAAGnE,KAAOqF,IACnBxE,EAAQsD,GAAGpE,KAAO+F,GAGtB1C,EAAWvC,GAiFwBkF,CAAaF,EAAM1D,OAAO6D,MAAOR,EAAOxF,KACrEgF,UAAW,kBAAMA,EAAUC,IAC3BgB,aAAc,kBA7DD,SAACZ,GAMpB,IALA,IAAMa,EAAe,CACnBnG,KAAK,GACLC,GAAIyE,IACJvE,WAAY,IAENiE,EAAE,EAAEA,EAAEtD,EAAQuD,OAAOD,IACxBtD,EAAQsD,GAAGnE,KAAOqF,IACnBxE,EAAQsD,GAAGjE,WAAWmE,KAAK6B,GAC3BrF,EAAQsD,GAAGlE,UAAW,GAG1BmD,EAAWvC,GAiDeoF,CAAaT,EAAOxF,KACxCmG,aAAc,kBA/CD,SAACd,GACpB,IAAI,IAAIlB,EAAE,EAAEA,EAAEtD,EAAQuD,OAAOD,IACxBtD,EAAQsD,GAAGnE,KAAOqF,GACnBxE,EAAQsE,OAAOhB,EAAG,GAGtBf,EAAWvC,GAyCesF,CAAaX,EAAOxF,KACxCoG,aAAc,SAACnE,GAAD,OAvCD,SAACA,EAAGgD,GACV,UAAVhD,EAAEoE,MACHrB,EAAUC,QACmBqB,IAA5BrC,EAAKD,UAAUiB,EAAM,IACtBhB,EAAKtB,SAAS,CACZoB,WAAW,IAEbE,EAAKD,UAAUiB,EAAM,GAAGsB,QAAQC,SAEhCvC,EAAKtB,SAAS,CACZoB,WAAW,KA6BYqC,CAAanE,EAAGgD,IACrCwB,MAAOxC,EAAKD,UAAUiB,GACtByB,SAAUzC,EAAKrD,MAAMmD,UACrB4C,UAAWvB,EAAaI,EAAOxF,MAG/BwF,EAAOtF,WAAWkE,OAAS,IAAyB,IAApBoB,EAAOvF,UACvC8C,EAAA5B,EAAAE,cAACkC,EAAD,CACE1C,QAAS2E,EAAOtF,WAChBkD,WAAY,SAAClD,GAAD,OAAgBqE,EAA2BiB,EAAOzF,KAAMG,iBAhIxDmD,IAAMC,WA2I1BsD,+LAEyB,IAAxB9D,KAAKU,MAAMkD,UACZ5D,KAAKU,MAAMiD,MAAMF,QAAQC,yCAGrB,IAAAK,EAYF/D,KAAKU,MAVPvD,EAFI4G,EAEJ5G,SACAyF,EAHImB,EAGJnB,MACA1C,EAJI6D,EAIJ7D,SACA4C,EALIiB,EAKJjB,iBACAZ,EANI6B,EAMJ7B,UACAiB,EAPIY,EAOJZ,aACAE,EARIU,EAQJV,aACAC,EATIS,EASJT,aACAO,EAVIE,EAUJF,UACAF,EAXII,EAWJJ,MAEF,OACE1D,EAAA5B,EAAAE,cAAC0B,EAAA5B,EAAM2F,SAAP,KACA/D,EAAA5B,EAAAE,cAAA,SACE0F,MAAO1G,EAAOC,QACd0F,MAAM,IACNxE,KAAK,SACL0B,QAAS8B,IAEXjC,EAAA5B,EAAAE,cAAA,SACEG,KAAK,WACLwF,QAAW/G,EACXiD,QAASF,IAEXD,EAAA5B,EAAAE,cAAA,SACEG,KAAK,OACLwE,MAAON,EACP1C,SAAU4C,EACVqB,WAAYb,EACZc,IAAKT,IAEP1D,EAAA5B,EAAAE,cAAA,aACGsF,GAEH5D,EAAA5B,EAAAE,cAAA,SACE0F,MAAO1G,EAAOI,aACduF,MAAM,IACNxE,KAAK,SACL0B,QAAS+C,IAEXlD,EAAA5B,EAAAE,cAAA,SACE0F,MAAO1G,EAAOK,gBACdsF,MAAM,IACNxE,KAAK,SACL0B,QAASiD,YApDM9C,IAAMC,WA2Dd3C,IClRAwG,6MAZbvG,MAAQ,CAAEwG,MAAO,2EAIf,OACErE,EAAA5B,EAAAE,cAAA,WACE0B,EAAA5B,EAAAE,cAACgG,EAAD,cARU/D,aCFlBgE,IAASC,OAAOxE,EAAA5B,EAAAE,cAACmG,EAAD,MAASpG,SAASqG,eAAe","file":"static/js/main.3b0d8bdf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst retrievedStorage = localStorage.getItem('myTreeData');\r\n\r\nif(retrievedStorage === null) {\r\n  localStorage.setItem('myTreeData', JSON.stringify([\r\n    {\r\n        name: \"Start Here\",\r\n        id: 1,\r\n        selected: false,\r\n        subOptions: []\r\n      }\r\n    ]));\r\n}\r\n\r\n\r\nconst myTreeData = JSON.parse(localStorage.getItem('myTreeData'))\r\n\r\nconst styles = {\r\n  addNode: {\r\n    backgroundColor:'dodgerBlue',\r\n    color:'white'\r\n  },\r\n  addSubButton: {\r\n    backgroundColor:'forestGreen',\r\n    color:'white'\r\n  },\r\n  deleteSubButton:{\r\n    backgroundColor: 'fireBrick',\r\n    color: 'white'\r\n  }\r\n}\r\n\r\nconst writeToLS = (newData) => {\r\n  localStorage.setItem('myTreeData', JSON.stringify(newData));\r\n};\r\n\r\n// Root component -> Manages all app state\r\nclass TreeTest extends React.Component {    \r\n  state = {\r\n    options: myTreeData,\r\n    selectedFile: null\r\n  }\r\n\r\n  downloadFile = (content, fileName, contentType) => {\r\n    const a = document.createElement(\"a\");\r\n    const file = new Blob([content], { type: contentType });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = fileName;\r\n    a.click();\r\n  }\r\n\r\n  exportJSON = () => {\r\n    this.downloadFile(JSON.stringify(this.state.options), \"data.json\", \"text/plain\");\r\n  }\r\n\r\n  getFile = (e) => {\r\n    let files = e.target.files;\r\n    let reader = new FileReader();\r\n    reader.readAsText(files[0]);\r\n\r\n    reader.onload = e => {\r\n      console.log(e.target.result);\r\n      localStorage.setItem('myTreeData', e.target.result);\r\n      this.setState({\r\n        options: JSON.parse(e.target.result)\r\n      })\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    writeToLS(this.state.options);\r\n\r\n     return (\r\n       <div>\r\n         <div>\r\n          <label>Select Json file to import</label>\r\n         </div>\r\n         <div>\r\n           <input type=\"file\" name=\"file\" onChange={this.getFile} accept=\".json\"/>\r\n         </div>\r\n         <button\r\n          onClick={() => this.exportJSON()}\r\n          >Export Data\r\n         </button>\r\n         <h1>My Tree</h1>\r\n         <OptionsList \r\n           options={this.state.options}\r\n           textChange={(options) => this.setState({options})}\r\n         />\r\n       </div>\r\n     )\r\n  }\r\n}\r\n\r\nclass OptionsList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = []\r\n  }\r\n\r\n  state = {\r\n    isLastNew : false,\r\n  }\r\n\r\n  render(){\r\n    const { options, textChange } = this.props;\r\n\r\n    this.textInput = [];\r\n\r\n    for(let i=0; i<options.length; i++){\r\n      this.textInput.push(React.createRef());\r\n    }\r\n    const handleCheckboxClicked = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].selected = !options[i].selected\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n    \r\n  \r\n    const handleChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].name = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n  \r\n    const handleSubOptionsTextChange = (optionName, subOptions) => {\r\n      options[optionName] = subOptions\r\n      textChange(options);\r\n    }\r\n\r\n    const uuidv4 = () => {\r\n      return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n    }\r\n  \r\n    const handleAdd = (index) => {\r\n      const newOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: []\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleAddSub = (optionId) => {\r\n      const newSubOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: []\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleDelete = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options.splice(i, 1)\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleReturn = (e, index) => {\r\n      if(e.key === 'Enter'){\r\n        handleAdd(index);\r\n      if(this.textInput[index+1] !== undefined){\r\n        this.setState({\r\n          isLastNew: false\r\n        })\r\n        this.textInput[index+1].current.focus()\r\n      } else{\r\n        this.setState({\r\n          isLastNew: true\r\n        })\r\n      }\r\n      }\r\n    }\r\n\r\n    const getNodeCount = (optionId) => {\r\n      let optionCount = 0;\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          optionCount = options[i].subOptions.length\r\n        }\r\n      }\r\n      return optionCount;\r\n    }\r\n\r\n    return(\r\n      <div>\r\n      {options.map((option, index) => {\r\n        return (\r\n        <ul>\r\n          <TextNode\r\n            selected={option.selected} \r\n            label={option.name} \r\n            onChange={() => handleCheckboxClicked(option.id)}\r\n            handleTextChange={(event) => handleChange(event.target.value, option.id)}\r\n            handleAdd={() => handleAdd(index)}\r\n            handleAddSub={() => handleAddSub(option.id)}\r\n            handleDelete={() => handleDelete(option.id)}\r\n            handleReturn={(e) => handleReturn(e, index)}\r\n            myRef={this.textInput[index]}\r\n            isMaxNew={this.state.isLastNew}\r\n            nodeCount={getNodeCount(option.id)}\r\n           />\r\n          {/* Base Case */}\r\n          {(option.subOptions.length > 0 && option.selected === true) &&\r\n            <OptionsList\r\n              options={option.subOptions}\r\n              textChange={(subOptions) => handleSubOptionsTextChange(option.name, subOptions)}\r\n             />\r\n          }\r\n        </ul>\r\n      )}\r\n      )}\r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nclass TextNode extends React.Component {\r\n  componentDidMount(){\r\n    if(this.props.isMaxNew === true){\r\n      this.props.myRef.current.focus()\r\n    }\r\n  }\r\n  render(){\r\n    const {    \r\n      selected, \r\n      label, \r\n      onChange, \r\n      handleTextChange,\r\n      handleAdd, \r\n      handleAddSub, \r\n      handleDelete,\r\n      handleReturn,\r\n      nodeCount,\r\n      myRef\r\n    } = this.props;\r\n    return(\r\n      <React.Fragment>\r\n      <input\r\n        style={styles.addNode}\r\n        value=\"+\"\r\n        type=\"button\"\r\n        onClick={handleAdd} \r\n      /> \r\n      <input\r\n        type=\"checkbox\"\r\n        checked = {selected}\r\n        onClick={onChange} \r\n      /> \r\n      <input \r\n        type=\"text\"\r\n        value={label}\r\n        onChange={handleTextChange}\r\n        onKeyPress={handleReturn}\r\n        ref={myRef}\r\n      />\r\n      <label>\r\n        {nodeCount}\r\n      </label>\r\n      <input\r\n        style={styles.addSubButton}\r\n        value=\"+\"\r\n        type=\"button\"\r\n        onClick={handleAddSub} \r\n      />\r\n      <input\r\n        style={styles.deleteSubButton}\r\n        value=\"-\"\r\n        type=\"button\"\r\n        onClick={handleDelete} \r\n      /> \r\n    </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TreeTest;","import React, { Component } from 'react';\n// import TreeTest from './components/TreeTest';\n// import TreeTest2 from './components/TreeTest2';\n// import TreeTest3 from './components/TreeTest3';\nimport TreeTest6 from './components/TreeTest6';\n\nclass App extends Component {\n\n  state = { count: 0 }\n\n\n  render() {\n    return (\n      <div>\n        <TreeTest6 />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}