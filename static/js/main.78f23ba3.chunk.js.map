{"version":3,"sources":["components/TextNode.js","components/OptionList.js","components/TreeView.js","App.js","index.js"],"names":["TextNode","state","showOptions","toggleOptions","methodName","_this","setState","this","props","isMaxNew","myRef","current","focus","_this2","_this$props","classes","selected","label","onChange","handleTextChange","handleAddSub","handleDelete","handleReturn","nodeCount","handleMoveIn","handleMoveOut","handleMoveUp","handleMoveDown","index","depth","count","react_default","a","createElement","className","nodeContainer","Badge","badgeContent","color","anchorOrigin","vertical","horizontal","Checkbox","checked","checkbox","size","TextField","nodeText","InputProps","disableUnderline","style","padding","value","onKeyPress","inputRef","multiline","options","IconButton","onClick","ArrowUpward_default","moveButtons","ArrowDownward_default","ArrowBack_default","ArrowForward_default","AddCircle_default","addButton","HighlightOff_default","deleteButton","MoreHoriz_default","React","Component","withStyles","theme","optionList","margin","borderLeft","display","height","width","borderBottom","border","fontSize","justifyContent","alignItems","OptionList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLastNew","textInput","textChange","i","length","push","createRef","handleSubOptionsTextChange","optionId","subOptions","id","uuidv4","Math","random","toString","substring","Date","now","handleAdd","newOption","name","splice","getNodeCount","optionCount","Fragment","map","option","key","concat","paddingLeft","components_TextNode","handleCheckboxClicked","event","newValue","handleChange","target","newSubOption","window","confirm","e","preventDefault","undefined","_ref","_ref2","styles","treeContainer","maxWidth","TreeView","listName","selectedFile","isLoading","anchorEl","setAnchorEl","lastSaved","componentDidMount","getServerData","search","location","listId","URLSearchParams","get","axios","then","res","data","list","createBaseNode","saveData","handleClose","currentDT","post","alert","newId","_id","document","href","click","getLSData","retrievedStorage","localStorage","getItem","setItem","JSON","stringify","parse","downloadFile","content","fileName","contentType","file","Blob","type","URL","createObjectURL","download","writeToLS","newData","exportJSON","getFile","files","reader","FileReader","readAsText","onload","result","createNew","handleMenu","currentTarget","handleTitleChange","AppBar","position","Toolbar","edge","Menu_default","Menu","getContentAnchorEl","keepMounted","transformOrigin","open","onClose","accept","htmlFor","MenuItem","Typography","variant","flexGrow","Search_default","MoreVert_default","fontStyle","marginTop","marginBottom","components_OptionList","createMuiTheme","palette","primary","blue","typography","overrides","MuiBadge","badge","minWidth","colorPrimary","backgroundColor","App","ThemeProvider","components_TreeView","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.78f23ba3.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport ArrowBack from '@material-ui/icons/ArrowBack';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport MoreHoriz from '@material-ui/icons/MoreHoriz';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = (theme) => ({\r\n  optionList:{\r\n    margin: 0,\r\n  },\r\n  nodeContainer:{\r\n    borderLeft: '1px dashed #ccc',\r\n    display:'flex',\r\n  },\r\n  checkbox:{\r\n    height: 0,\r\n    width: '5px'\r\n  },\r\n  nodeText:{\r\n    width:'700px',\r\n    borderBottom: '1px dashed #ccc'\r\n  },\r\n  options:{\r\n    border: '1px dashed #ccc',\r\n    display:'flex',\r\n    height: '21px',\r\n  },\r\n  addButton:{\r\n    fontSize: '17px',\r\n    color: 'green'\r\n  },\r\n  deleteButton:{\r\n    fontSize: '17px',\r\n    color: 'red',\r\n  },\r\n  moveButtons:{\r\n    fontSize: '17px',\r\n    color: 'gray',\r\n  },\r\n  nodeCount:{\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  // valueCount:{\r\n  //   justifyContent: 'center',\r\n  //   alignItems: 'center',\r\n  //   border: '1px solid #ccc',\r\n  //   width:'50px',\r\n  //   height: '20px'\r\n  // }\r\n});\r\n\r\nclass TextNode extends React.Component {\r\n\r\n  state = {\r\n    showOptions: false,\r\n  }\r\n\r\n  componentDidMount(){\r\n    if(this.props.isMaxNew === true){\r\n      this.props.myRef.current.focus()\r\n    }\r\n  }\r\n\r\n  toggleOptions = (methodName) => {\r\n\r\n    if(methodName){\r\n      methodName();\r\n    }\r\n\r\n    this.setState({\r\n      showOptions: !this.state.showOptions\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      classes,    \r\n      selected, \r\n      label, \r\n      onChange, \r\n      handleTextChange,\r\n      handleAddSub, \r\n      handleDelete,\r\n      handleReturn,\r\n      nodeCount,\r\n      myRef,\r\n      handleMoveIn,\r\n      handleMoveOut,\r\n      handleMoveUp,\r\n      handleMoveDown,\r\n      index,\r\n      depth,\r\n      count,\r\n      // handleCountChange,\r\n      // subCount\r\n    } = this.props;\r\n    return(\r\n      <div className={classes.nodeContainer}>\r\n        <Badge\r\n          badgeContent={nodeCount}\r\n          color='primary'\r\n          anchorOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'left',\r\n          }}\r\n          >\r\n          <Checkbox\r\n            checked={selected}\r\n            className={classes.checkbox}\r\n            onChange={onChange}\r\n            color=\"primary\"\r\n            size='small'\r\n          />\r\n        </Badge>\r\n        <TextField\r\n          className={classes.nodeText}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n            style: {\r\n              padding: 0,\r\n            }\r\n          }}\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          inputRef={myRef}\r\n          multiline\r\n        />\r\n        {/* <TextField\r\n          className={classes.valueCount}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n            style: {\r\n              padding: 0,\r\n            }\r\n          }}\r\n          onChange={handleCountChange}\r\n          value={subCount === 0 ? count : subCount}\r\n          disabled={subCount === 0 ? false: true}\r\n        /> */}\r\n        {this.state.showOptions === true &&\r\n          <div\r\n            className={classes.options}\r\n            >\r\n            {index > 0 &&\r\n              <IconButton\r\n              onClick={handleMoveUp}\r\n              size='small'\r\n              >\r\n                <ArrowUpward\r\n                  className={classes.moveButtons}\r\n                />\r\n              </IconButton>\r\n            }\r\n            {index < count &&\r\n              <IconButton\r\n                onClick={handleMoveDown}\r\n                size='small'\r\n              >\r\n                <ArrowDownward\r\n                  className={classes.moveButtons}\r\n                />\r\n              </IconButton>\r\n            }\r\n            {depth > 0 &&\r\n              <IconButton\r\n                onClick={handleMoveIn} \r\n                size='small'\r\n                >\r\n                <ArrowBack\r\n                  className={classes.moveButtons}\r\n                />\r\n              </IconButton>\r\n            }\r\n            {index !== 0 &&\r\n              <IconButton\r\n                onClick={handleMoveOut}\r\n                size='small'\r\n                >\r\n                <ArrowForward\r\n                  className={classes.moveButtons}\r\n                />\r\n              </IconButton>\r\n            }\r\n            <IconButton\r\n              onClick={() => this.toggleOptions(handleAddSub)}\r\n              size='small'\r\n              >\r\n              <AddCircleIcon\r\n                className={classes.addButton}\r\n              />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleDelete} \r\n              size='small'\r\n              >\r\n              <HighlightOffIcon\r\n                className={classes.deleteButton}\r\n              />\r\n            </IconButton>\r\n          </div>\r\n        }\r\n        <IconButton\r\n          onClick={() => this.toggleOptions()} \r\n          size='small'\r\n          >\r\n          <MoreHoriz\r\n            className={classes.moveButtons}\r\n          />\r\n        </IconButton>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(TextNode)","import React from 'react';\r\nimport TextNode from './TextNode';\r\n\r\nclass OptionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = []\r\n  }\r\n\r\n  state = {\r\n    isLastNew : false,\r\n  }\r\n\r\n  // onDragStart = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.target.style.borderLeft = '1px solid red';\r\n  //   }\r\n\r\n  // onDragEnter = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.target.style.borderLeft = '1px solid red';\r\n  //   }\r\n\r\n  // onDragOver = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.target.style.borderLeft = '1px solid red';\r\n  //   }\r\n\r\n  // onDragEnd = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.target.style.borderLeft = '1px dashed #ccc';\r\n  //   }\r\n\r\n  // onDragLeave = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.target.style.borderLeft = 'none';\r\n  //   }\r\n\r\n  // onDrop = (e) => {\r\n  //   e.preventDefault();\r\n  //   e.target.style.borderLeft = '1px solid red';\r\n  //   }\r\n\r\n  render(){\r\n    const { options, textChange } = this.props;\r\n\r\n    this.textInput = [];\r\n\r\n    for(let i=0; i<options.length; i++){\r\n      this.textInput.push(React.createRef());\r\n    }\r\n    const handleCheckboxClicked = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].selected = !options[i].selected\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n    \r\n    const handleChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].name = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n  \r\n    const handleSubOptionsTextChange = (optionId, subOptions) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].subOptions = subOptions\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n\r\n    const uuidv4 = () => {\r\n      return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n    }\r\n  \r\n    const handleAdd = (index) => {\r\n      const newOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n        selected: false,\r\n        depth: options[index].depth,\r\n        // count: 0\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleAddSub = (optionId) => {\r\n      const newSubOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n        selected: false,\r\n        // count: 0\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          newSubOption.depth = options[i].depth + 1\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleDelete = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options.splice(i, 1)\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleReturn = (e, index) => {\r\n      if(e.key === 'Enter'){\r\n        e.preventDefault()\r\n        handleAdd(index);\r\n      if(this.textInput[index+1] !== undefined){\r\n        this.setState({\r\n          isLastNew: false\r\n        })\r\n        this.textInput[index+1].current.focus()\r\n      } else{\r\n        this.setState({\r\n          isLastNew: true\r\n        })\r\n      }\r\n      }\r\n    }\r\n\r\n    const handleCountChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].count = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n\r\n    const getNodeCount = (optionId) => {\r\n      let optionCount = 0;\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          optionCount = options[i].subOptions.length\r\n        }\r\n      }\r\n      return optionCount;\r\n    }\r\n\r\n   const handleMoveIn = (option, index) => {\r\n      const newOption = {\r\n        name:option.name,\r\n        id: option.id,\r\n        subOptions: option.subOptions,\r\n        selected: option.selected,\r\n        depth: option.depth - 1,\r\n        // count: 0\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n\r\n    const handleMoveOut = (option, index) => {\r\n      const newSubOption = {\r\n        name:option.name,\r\n        id: option.id,\r\n        subOptions: option.subOptions,\r\n        selected: option.selected,\r\n        depth: option.depth + 1\r\n        // count: 0\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(i === index-1){\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n\r\n    const handleMoveUp = (index) => {\r\n      [options[index],options[index-1]] = [options[index-1],options[index]];\r\n      textChange(options)\r\n    }\r\n\r\n    const handleMoveDown = (index) => {\r\n      [options[index],options[index+1]] = [options[index+1],options[index]];\r\n      textChange(options)\r\n    }\r\n\r\n    // const getSubOptionCount = (optionId) => {\r\n    //   let subCount = 0;\r\n    //   for(let i=0;i<options.length;i++){\r\n    //     if(options[i].id === optionId){\r\n    //       for(let j=0;j<options[i].subOptions.length;j++){\r\n    //         subCount = subCount + parseInt(options[i].subOptions[j].count)\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //   return subCount;\r\n    // }\r\n\r\n    return(\r\n      <React.Fragment>\r\n      {options.map((option, index) => {\r\n        return (\r\n        <ul\r\n          key={[option.id, index].concat()}\r\n          style={{\r\n          margin: 0,\r\n          paddingLeft: option.depth === 0 ? 0 : '20px',\r\n          borderLeft: option.depth === 0 ?'none': '1px dashed #ccc'\r\n          }}\r\n          // draggable\r\n          // onDragEnter={this.onDragEnter}\r\n          // onDragLeave={this.onDragLeave}\r\n          // onDrop={this.onDrop}\r\n          // onDragStart={this.onDragStart}\r\n          // onDragOver={this.onDragOver}\r\n          // onDragEnd={this.onDragEnd}\r\n          >\r\n          <TextNode\r\n            selected={option.selected} \r\n            label={option.name}\r\n            depth={option.depth}\r\n            onChange={() => handleCheckboxClicked(option.id)}\r\n            handleTextChange={(event) => handleChange(event.target.value, option.id)}\r\n            handleAdd={() => handleAdd(index)}\r\n            handleAddSub={() => handleAddSub(option.id)}\r\n            handleDelete={() => {if (window.confirm(`Are you sure you want to delete \"${option.name}\"?`)) handleDelete(option.id)}}\r\n            handleReturn={(e) => handleReturn(e, index)}\r\n            myRef={this.textInput[index]}\r\n            isMaxNew={this.state.isLastNew}\r\n            nodeCount={getNodeCount(option.id)}\r\n            count={options.length - 1}\r\n            handleMoveIn={() => {\r\n              this.props.handleMoveIn(option, index) \r\n              handleDelete(option.id)}\r\n            }\r\n            handleMoveOut={() => {\r\n              handleMoveOut(option, index)\r\n              handleDelete(option.id)\r\n            }}\r\n            index={index}\r\n            handleMoveUp={() => handleMoveUp(index)}\r\n            handleMoveDown={() => handleMoveDown(index)}\r\n            // handleCountChange={(event) => handleCountChange(event.target.value, option.id)}\r\n            // subCount={getSubOptionCount(option.id)}\r\n           />\r\n          {/* Base Case */}\r\n          {(option.subOptions.length > 0 && option.selected === true) &&\r\n            <OptionList\r\n              options={option.subOptions}\r\n              textChange={(subOptions) => handleSubOptionsTextChange(option.id, subOptions)}\r\n              handleMoveIn={(option, index) => handleMoveIn(option, index)}\r\n             />\r\n          }\r\n        </ul>\r\n      )}\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n  }\r\n}\r\n\r\nexport default OptionList;","import React from 'react';\nimport OptionList from './OptionList';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n// import Button from '@material-ui/core/Button';\nimport axios from 'axios';\n\nconst styles = {\n  treeContainer: {\n    maxWidth: '700px'\n  },\n}\n\nclass TreeView extends React.Component {    \n  state = {\n    listName: 'List Name',\n    options: [],\n    selectedFile: null,\n    isLoading: false,\n    anchorEl: null,\n    setAnchorEl: false,\n    lastSaved: null,\n  }\n\n  componentDidMount = () => {\n    this.getServerData();\n    // const treeData = this.getLSData();\n    \n    // this.setState({\n    //   options: treeData,\n    //   isLoading: false\n    // })\n  }\n\n  getServerData = () => {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let listId = params.get('query');\n\n    if(listId !== undefined && listId !== null){\n      this.setState({\n        isLoading: true\n      },() => {\n        axios\n        .get(`https://guarded-mesa-76047.herokuapp.com/api/lists/${listId}`)\n        .then(res => this.setState({\n          listName: res.data.listName,\n          options: res.data.list,\n          lastSaved: res.data.lastSaved,\n          isLoading: false\n        }))\n        }\n      )\n    } else {\n      this.createBaseNode()\n    }\n  }\n\n  saveData = () => {\n    this.handleClose();\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let listId = params.get('query');\n    const currentDT = new Date();\n\n    if(listId === null){\n      axios\n      .post(`https://guarded-mesa-76047.herokuapp.com/api/lists/new`, {\n        list: this.state.options,\n        listName: this.state.listName,\n        lastSaved: new Date()\n      })\n      .then((res) => {\n        alert('New list created!')\n        return(res);\n      })\n      .then((res) => {\n        const newId = res.data._id;\n        const a = document.createElement(\"a\");\n        a.href = `https://wmxgroup.github.io/react-sandbox-1/?query=${newId}`;\n        a.click();\n      })\n    } else {\n      axios\n      .post(`https://guarded-mesa-76047.herokuapp.com/api/lists/update/${listId}`, {\n        list: this.state.options,\n        listName: this.state.listName,\n        lastSaved: currentDT\n      })\n      .then(() => {\n        this.setState({\n          lastSaved: currentDT\n        })\n        alert('Data saved successfully!')\n      });\n    }\n  }\n\n  getLSData = () => {\n    const retrievedStorage = localStorage.getItem('myTreeData');\n    if(retrievedStorage === null || retrievedStorage === []) {\n      localStorage.setItem('myTreeData', JSON.stringify([\n        {\n            name: \"Start Here\",\n            id: 1,\n            selected: false,\n            subOptions: [],\n            depth: 0\n          }\n        ]));\n    }\n\n    return (JSON.parse(localStorage.getItem('myTreeData')))\n  }\n\n  downloadFile = (content, fileName, contentType) => {\n    const a = document.createElement(\"a\");\n    const file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  writeToLS = (newData) => {\n    localStorage.setItem('myTreeData', JSON.stringify(newData));\n  };\n\n  exportJSON = () => {\n    this.handleClose();\n    this.downloadFile(JSON.stringify(this.state.options), \"data.json\", \"text/plain\");\n  }\n\n  getFile = (e) => {\n    this.handleClose();\n    let files = e.target.files;\n    let reader = new FileReader();\n    reader.readAsText(files[0]);\n\n    reader.onload = e => {\n      localStorage.setItem('myTreeData', e.target.result);\n      this.setState({\n        options: JSON.parse(e.target.result)\n      })\n    };\n  }\n\n  createNew = () => {\n    this.handleClose();\n    const newData = \n    [{\n      name: \"Start Here\",\n      id: 1,\n      selected: false,\n      subOptions: [],\n      depth: 0\n    }];\n\n    axios\n    .post(`https://guarded-mesa-76047.herokuapp.com/api/lists/new`, {\n      list: newData,\n      listName: this.state.listName,\n      lastSaved: new Date()\n    })\n    .then((res) => {\n      alert('New list created!')\n      return(res);\n    })\n    .then((res) => {\n      const newId = res.data._id;\n\n      const a = document.createElement(\"a\");\n      a.href = `https://wmxgroup.github.io/react-sandbox-1/?query=${newId}`;\n      a.click();\n    });\n  }\n\n  createBaseNode = () => {\n    this.handleClose();\n    const newData = \n    [{\n      name: \"Start Here\",\n      id: 1,\n      selected: false,\n      subOptions: [],\n      depth: 0,\n      // count: 0\n    }];\n\n    this.setState({\n      options: newData,\n    });\n  }\n\n  handleMenu = event => {\n    this.setState({\n      anchorEl: event.currentTarget,\n      setAnchorEl: true\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      setAnchorEl: false\n    });\n  };\n\n  handleTitleChange = (e) => {\n    this.setState({\n      listName: e.target.value\n    })\n  }\n\n  // onDragOver = (e) => {\n  //   e.preventDefault();\n  //   e.target.style.background = 'yellow';\n  //   }\n\n  // onDragEnter = (e) => {\n  //   e.preventDefault();\n  //   e.target.style.background = 'yellow';\n  //   }\n\n  // onDragLeave = (e) => {\n  //   e.preventDefault();\n  //   e.target.style.background = 'green';\n  //   }\n\n  render() {\n\n    // if(this.state.isLoading === false){\n    //   this.writeToLS(this.state.options);\n    // }\n\n     return (\n       <React.Fragment>\n        <AppBar \n          position=\"fixed\" \n          color=\"primary\">\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                onClick={this.handleMenu}\n                >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                  id=\"menu-appbar\"\n                  anchorEl={this.state.anchorEl}\n                  getContentAnchorEl={null}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                  }}\n                  keepMounted\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                  }}\n                  open={this.state.setAnchorEl}\n                  onClose={this.handleClose}\n                >\n                  <input \n                    type=\"file\"\n                    style={{ display: 'none' }}\n                    id=\"raised-button-file\"\n                    name=\"file\" \n                    onChange={this.getFile}\n                    accept=\".json\"\n                    />\n                  <label htmlFor=\"raised-button-file\">\n                    <MenuItem onClick={() => this.getFile()}>Import JSON</MenuItem>\n                  </label>\n                  <MenuItem onClick={() => this.exportJSON()}>Export Data</MenuItem>\n                  <MenuItem onClick={() => this.saveData()}>Save Data</MenuItem>\n                  <MenuItem onClick={() => this.createNew()}>Create New</MenuItem>\n                </Menu>\n              <Typography variant=\"h6\">\n                  Outliner\n              </Typography>\n              <div style={{flexGrow: 1}} />\n              <IconButton color=\"inherit\">\n                <SearchIcon />\n              </IconButton>\n              <IconButton edge=\"end\" color=\"inherit\">\n                <MoreIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n          <Toolbar />\n            {/* <Button\n              style={{\n                padding: '8px',\n                margin: '3px',\n                textAlign: 'center',\n              }}\n              variant=\"contained\"\n              onClick={() => this.exportJSON()}\n              color=\"primary\"\n              >Export Data\n            </Button> */}\n\n          {/* <div style={{display:'flex'}}>\n            <div \n              style={{backgroundColor:'red',width:'50px',height:'50px'}} \n              draggable\n              >\n              Drag\n            </div>\n            <div \n              style={{backgroundColor:'green',width:'50px',height:'50px'}}\n              onDragEnter={this.onDragEnter}\n              onDragLeave={this.onDragLeave}\n              onDragOver={this.onDragOver}\n              onDrop={() => {console.log('test')}}\n              >\n              Drop\n            </div>\n          </div> */}\n          <div\n            style={{\n              fontStyle:'italic',\n              color:'#bbb',\n            }}>\n              {this.state.lastSaved === null ? 'Not Saved' : 'Last Saved: ' + this.state.lastSaved}\n          </div>\n          <TextField\n          InputProps={{\n            disableUnderline: true,\n            style: {\n              display: 'block',\n              fontSize: '2em',\n              marginTop: '0.3em',\n              marginBottom: '0.3em',\n              // padding: 0\n            }\n          }}\n          value={this.state.listName}\n          onChange={this.handleTitleChange}\n        />\n          <div style={styles.treeContainer}>\n            <OptionList \n                options={this.state.options}\n                textChange={(options) => this.setState({options})}\n              />\n          </div>\n        </React.Fragment>\n     )\n  }\n}\n\nexport default TreeView;","import React, { Component } from 'react';\nimport TreeView from './components/TreeView';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { blue } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue\n  },\n  typography: {\n\n  },\n  overrides: {\n    MuiBadge: {\n      badge: {\n        height: 13,\n        minWidth: 13,\n        padding: 0,\n        \n      },\n      colorPrimary: {\n        backgroundColor: 'Navy'\n      }\n    },\n  },\n});\n\nclass App extends Component {\n\n  state = { count: 0 }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n          <TreeView />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}