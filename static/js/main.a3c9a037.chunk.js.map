{"version":3,"sources":["components/TextNode.js","components/OptionList.js","components/TreeView.js","App.js","index.js"],"names":["TextNode","this","props","isMaxNew","myRef","current","focus","_this$props","classes","selected","label","onChange","handleTextChange","handleAddSub","handleDelete","handleReturn","nodeCount","react_default","a","createElement","className","nodeContainer","Checkbox","checked","checkbox","color","size","TextField","nodeText","InputProps","disableUnderline","style","padding","value","onKeyPress","inputRef","multiline","IconButton","onClick","AddCircle_default","addButton","HighlightOff_default","deleteButton","React","Component","withStyles","theme","optionList","margin","borderLeft","display","width","fontSize","justifyContent","alignItems","height","OptionList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLastNew","textInput","_this2","options","textChange","i","length","push","createRef","handleSubOptionsTextChange","optionName","subOptions","uuidv4","Math","random","toString","substring","Date","now","handleAdd","index","newOption","name","id","depth","splice","getNodeCount","optionId","optionCount","Fragment","map","option","paddingLeft","components_TextNode","handleCheckboxClicked","event","newValue","handleChange","target","newSubOption","e","key","preventDefault","undefined","setState","TreeView","selectedFile","isLoading","componentDidMount","treeData","getData","getServerData","axios","get","then","res","console","log","retrievedStorage","localStorage","getItem","setItem","JSON","stringify","parse","downloadFile","content","fileName","contentType","document","file","Blob","type","href","URL","createObjectURL","download","click","writeToLS","newData","exportJSON","getFile","files","reader","FileReader","readAsText","onload","result","match","params","accept","htmlFor","Button","variant","component","components_OptionList","createMuiTheme","palette","primary","blue","typography","App","count","react_router_dom","ThemeProvider","react_router","exact","path","render","components_TreeView","ReactDOM","src_App","getElementById"],"mappings":"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","file":"static/js/main.a3c9a037.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = (theme) => ({\r\n  optionList:{\r\n    margin: 0,\r\n  },\r\n  nodeContainer:{\r\n    borderLeft: '1px solid #ccc',\r\n    display:'flex',\r\n  },\r\n  nodeText:{\r\n    // border: 'none',\r\n    width:'500px'\r\n\r\n  },\r\n  addButton:{\r\n    fontSize: '17px',\r\n    color: 'green',\r\n  },\r\n  deleteButton:{\r\n    fontSize: '17px',\r\n    color: 'red',\r\n  },\r\n  nodeCount:{\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  checkbox:{\r\n    height: 0\r\n  },\r\n});\r\n\r\nclass TextNode extends React.Component {\r\n  componentDidMount(){\r\n    if(this.props.isMaxNew === true){\r\n      this.props.myRef.current.focus()\r\n    }\r\n  }\r\n  render(){\r\n    const {\r\n      classes,    \r\n      selected, \r\n      label, \r\n      onChange, \r\n      handleTextChange,\r\n      handleAddSub, \r\n      handleDelete,\r\n      handleReturn,\r\n      nodeCount,\r\n      myRef\r\n    } = this.props;\r\n    return(\r\n      <div className={classes.nodeContainer}>\r\n        <Checkbox\r\n          checked={selected}\r\n          className={classes.checkbox}\r\n          onChange={onChange}\r\n          color=\"primary\"\r\n          size='small'\r\n        />\r\n        <TextField\r\n          className={classes.nodeText}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n            style: {\r\n              padding: 0,\r\n            }\r\n          }}\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          inputRef={myRef}\r\n          multiline\r\n        />\r\n        <label className={classes.nodeCount}>\r\n          {nodeCount}\r\n        </label>\r\n        <IconButton\r\n          onClick={handleAddSub}\r\n          size='small'\r\n        >\r\n          <AddCircleIcon\r\n            className={classes.addButton}\r\n          />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleDelete} \r\n          size='small'\r\n        >\r\n          <HighlightOffIcon\r\n            className={classes.deleteButton}\r\n          />\r\n        </IconButton>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(TextNode)","import React from 'react';\r\nimport TextNode from './TextNode';\r\n\r\nclass OptionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = []\r\n  }\r\n\r\n  state = {\r\n    isLastNew : false,\r\n  }\r\n\r\n  render(){\r\n    const { options, textChange } = this.props;\r\n\r\n    this.textInput = [];\r\n\r\n    for(let i=0; i<options.length; i++){\r\n      this.textInput.push(React.createRef());\r\n    }\r\n    const handleCheckboxClicked = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].selected = !options[i].selected\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n    \r\n    const handleChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].name = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n  \r\n    const handleSubOptionsTextChange = (optionName, subOptions) => {\r\n      options[optionName] = subOptions\r\n      textChange(options);\r\n    }\r\n\r\n    const uuidv4 = () => {\r\n      return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n    }\r\n  \r\n    const handleAdd = (index) => {\r\n      const newOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n        depth: options[index].depth\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleAddSub = (optionId) => {\r\n      const newSubOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          newSubOption.depth = options[i].depth + 1\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleDelete = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options.splice(i, 1)\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleReturn = (e, index) => {\r\n      if(e.key === 'Enter'){\r\n        e.preventDefault()\r\n        handleAdd(index);\r\n      if(this.textInput[index+1] !== undefined){\r\n        this.setState({\r\n          isLastNew: false\r\n        })\r\n        this.textInput[index+1].current.focus()\r\n      } else{\r\n        this.setState({\r\n          isLastNew: true\r\n        })\r\n      }\r\n      }\r\n    }\r\n\r\n    const getNodeCount = (optionId) => {\r\n      let optionCount = 0;\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          optionCount = options[i].subOptions.length\r\n        }\r\n      }\r\n      return optionCount;\r\n    }\r\n\r\n    return(\r\n      <React.Fragment>\r\n      {options.map((option, index) => {\r\n        return (\r\n        <ul style={{\r\n          margin: 0,\r\n          paddingLeft: option.depth === 0 ? 0 : '20px',\r\n          borderLeft: option.depth === 0 ?'none': '1px #ccc solid'\r\n        }}>\r\n          <TextNode\r\n            selected={option.selected} \r\n            label={option.name} \r\n            onChange={() => handleCheckboxClicked(option.id)}\r\n            handleTextChange={(event) => handleChange(event.target.value, option.id)}\r\n            handleAdd={() => handleAdd(index)}\r\n            handleAddSub={() => handleAddSub(option.id)}\r\n            handleDelete={() => handleDelete(option.id)}\r\n            handleReturn={(e) => handleReturn(e, index)}\r\n            myRef={this.textInput[index]}\r\n            isMaxNew={this.state.isLastNew}\r\n            nodeCount={getNodeCount(option.id)}\r\n           />\r\n          {/* Base Case */}\r\n          {(option.subOptions.length > 0 && option.selected === true) &&\r\n            <OptionList\r\n              options={option.subOptions}\r\n              textChange={(subOptions) => handleSubOptionsTextChange(option.name, subOptions)}\r\n             />\r\n          }\r\n        </ul>\r\n      )}\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n  }\r\n}\r\n\r\nexport default OptionList;","import React from 'react';\nimport OptionList from './OptionList';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\n\nclass TreeView extends React.Component {    \n  state = {\n    options: [],\n    selectedFile: null,\n    isLoading: true\n  }\n\n  componentDidMount = () => {\n    // this.getServerData();\n    const treeData = this.getData();\n    \n    this.setState({\n      options: treeData,\n      isLoading: false\n    })\n  }\n\n  getServerData = () => {\n    axios\n    .get('https://guarded-mesa-76047.herokuapp.com/api/lists')\n    .then(res => console.log(res));\n    // .then(res => this.setState({ options: res.list }));\n  }\n\n  getData = () => {\n    const retrievedStorage = localStorage.getItem('myTreeData');\n    if(retrievedStorage === null || retrievedStorage === []) {\n      localStorage.setItem('myTreeData', JSON.stringify([\n        {\n            name: \"Start Here\",\n            id: 1,\n            selected: false,\n            subOptions: [],\n            depth: 0\n          }\n        ]));\n    }\n\n    return (JSON.parse(localStorage.getItem('myTreeData')))\n  }\n\n  downloadFile = (content, fileName, contentType) => {\n    const a = document.createElement(\"a\");\n    const file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  writeToLS = (newData) => {\n    localStorage.setItem('myTreeData', JSON.stringify(newData));\n  };\n\n  exportJSON = () => {\n    this.downloadFile(JSON.stringify(this.state.options), \"data.json\", \"text/plain\");\n  }\n\n  getFile = (e) => {\n    let files = e.target.files;\n    let reader = new FileReader();\n    reader.readAsText(files[0]);\n\n    reader.onload = e => {\n      localStorage.setItem('myTreeData', e.target.result);\n      this.setState({\n        options: JSON.parse(e.target.result)\n      })\n    };\n  }\n\n  render() {\n\n    if(this.props.match.params.id !== undefined){\n      console.log(this.props.match.params.id);\n    }\n    \n\n    if(this.state.isLoading === false){\n      this.writeToLS(this.state.options);\n    }\n\n     return (\n       <div>\n         <div>\n         <input \n          type=\"file\"\n          style={{ display: 'none' }}\n          id=\"raised-button-file\"\n          name=\"file\" \n          onChange={this.getFile}\n          accept=\".json\"\n          />\n          <label htmlFor=\"raised-button-file\">\n            <Button \n              variant=\"contained\"\n              color=\"secondary\"\n              component=\"span\">\n              Import JSON\n            </Button>\n          </label>\n         </div>\n         <Button\n          variant=\"contained\"\n          onClick={() => this.exportJSON()}\n          color=\"primary\"\n          >Export Data\n         </Button>\n         <h1>My Tree</h1>\n          <OptionList \n            options={this.state.options}\n            textChange={(options) => this.setState({options})}\n          />\n       </div>\n     )\n  }\n}\n\nexport default TreeView;","import React, { Component } from 'react';\nimport TreeView from './components/TreeView';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { blue } from '@material-ui/core/colors';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue\n  },\n  typography: {\n\n  }\n});\n\nclass App extends Component {\n\n  state = { count: 0 }\n\n  render() {\n    return (\n      <Router>\n      <ThemeProvider theme={theme}>\n        <Route exact path=\"/\" render={() => (\n              <TreeView />\n            )} />\n        <Route path=\"/:id\" component={TreeView} />\n      </ThemeProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}