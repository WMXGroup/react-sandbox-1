{"version":3,"sources":["components/TreeTest6.js","App.js","index.js"],"names":["retrievedStorage","localStorage","getItem","setItem","JSON","stringify","name","id","selected","subOptions","myTreeData","parse","styles","addNode","backgroundColor","color","addSubButton","deleteSubButton","optionList","margin","textNode","border","display","flex","height","nodeText","resize","overflow","overflowWrap","TreeTest","state","options","selectedFile","downloadFile","content","fileName","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","exportJSON","_this","getFile","e","files","target","reader","FileReader","readAsText","onload","console","log","result","setState","newData","_this2","this","react_default","onChange","accept","onClick","TreeTest6_OptionsList","textChange","React","Component","OptionsList","props","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLastNew","textInput","_this4","_this$props","i","length","push","createRef","handleSubOptionsTextChange","optionName","uuidv4","Math","random","toString","substring","Date","now","handleAdd","index","newOption","splice","getNodeCount","optionId","optionCount","Fragment","map","option","style","TreeTest6_TextNode","label","handleCheckboxClicked","handleTextChange","event","newValue","handleChange","value","handleAddSub","newSubOption","handleDelete","handleReturn","key","preventDefault","undefined","current","focus","myRef","isMaxNew","nodeCount","TextNode","_this$props2","Checkbox","checked","TextField","InputProps","disableUnderline","onKeyPress","inputRef","multiline","justifyContent","alignItems","IconButton","AddCircle_default","HighlightOff_default","App","count","TreeTest6","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.0e4fa0c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst retrievedStorage = localStorage.getItem('myTreeData');\r\n\r\nif(retrievedStorage === null || retrievedStorage === []) {\r\n  localStorage.setItem('myTreeData', JSON.stringify([\r\n    {\r\n        name: \"Start Here\",\r\n        id: 1,\r\n        selected: false,\r\n        subOptions: []\r\n      }\r\n    ]));\r\n}\r\n\r\n\r\nconst myTreeData = JSON.parse(localStorage.getItem('myTreeData'))\r\n\r\nconst styles = {\r\n  addNode: {\r\n    backgroundColor:'dodgerBlue',\r\n    color:'white'\r\n  },\r\n  addSubButton: {\r\n    backgroundColor:'forestGreen',\r\n    color:'white'\r\n  },\r\n  deleteSubButton:{\r\n    backgroundColor: 'fireBrick',\r\n    color: 'white'\r\n  },\r\n  optionList:{\r\n    margin: 0,\r\n  },\r\n  textNode:{\r\n    border: '1px solid #ccc',\r\n    display:'flex',\r\n    flex: 1,\r\n    height: '100%'\r\n  },\r\n  nodeText:{\r\n    border: 'none',\r\n    resize: 'none',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    overflowWrap: 'break-word',\r\n  },\r\n}\r\n\r\nconst writeToLS = (newData) => {\r\n  localStorage.setItem('myTreeData', JSON.stringify(newData));\r\n};\r\n\r\n// Root component -> Manages all app state\r\nclass TreeTest extends React.Component {    \r\n  state = {\r\n    options: myTreeData,\r\n    selectedFile: null\r\n  }\r\n\r\n  downloadFile = (content, fileName, contentType) => {\r\n    const a = document.createElement(\"a\");\r\n    const file = new Blob([content], { type: contentType });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = fileName;\r\n    a.click();\r\n  }\r\n\r\n  exportJSON = () => {\r\n    this.downloadFile(JSON.stringify(this.state.options), \"data.json\", \"text/plain\");\r\n  }\r\n\r\n  getFile = (e) => {\r\n    let files = e.target.files;\r\n    let reader = new FileReader();\r\n    reader.readAsText(files[0]);\r\n\r\n    reader.onload = e => {\r\n      console.log(e.target.result);\r\n      localStorage.setItem('myTreeData', e.target.result);\r\n      this.setState({\r\n        options: JSON.parse(e.target.result)\r\n      })\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    writeToLS(this.state.options);\r\n\r\n     return (\r\n       <div>\r\n         <div>\r\n          <label>Select Json file to import</label>\r\n         </div>\r\n         <div>\r\n           <input type=\"file\" name=\"file\" onChange={this.getFile} accept=\".json\"/>\r\n         </div>\r\n         <button\r\n          onClick={() => this.exportJSON()}\r\n          >Export Data\r\n         </button>\r\n         <h1>My Tree</h1>\r\n          <OptionsList \r\n            options={this.state.options}\r\n            textChange={(options) => this.setState({options})}\r\n          />\r\n       </div>\r\n     )\r\n  }\r\n}\r\n\r\nclass OptionsList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = []\r\n  }\r\n\r\n  state = {\r\n    isLastNew : false,\r\n  }\r\n\r\n  render(){\r\n    const { options, textChange } = this.props;\r\n\r\n    this.textInput = [];\r\n\r\n    for(let i=0; i<options.length; i++){\r\n      this.textInput.push(React.createRef());\r\n    }\r\n    const handleCheckboxClicked = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].selected = !options[i].selected\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n    \r\n  \r\n    const handleChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].name = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n  \r\n    const handleSubOptionsTextChange = (optionName, subOptions) => {\r\n      options[optionName] = subOptions\r\n      textChange(options);\r\n    }\r\n\r\n    const uuidv4 = () => {\r\n      return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n    }\r\n  \r\n    const handleAdd = (index) => {\r\n      const newOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: []\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleAddSub = (optionId) => {\r\n      const newSubOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: []\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleDelete = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options.splice(i, 1)\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleReturn = (e, index) => {\r\n      if(e.key === 'Enter'){\r\n        e.preventDefault()\r\n        handleAdd(index);\r\n      if(this.textInput[index+1] !== undefined){\r\n        this.setState({\r\n          isLastNew: false\r\n        })\r\n        this.textInput[index+1].current.focus()\r\n      } else{\r\n        this.setState({\r\n          isLastNew: true\r\n        })\r\n      }\r\n      }\r\n    }\r\n\r\n    const getNodeCount = (optionId) => {\r\n      let optionCount = 0;\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          optionCount = options[i].subOptions.length\r\n        }\r\n      }\r\n      return optionCount;\r\n    }\r\n\r\n    return(\r\n      <React.Fragment>\r\n      {options.map((option, index) => {\r\n        return (\r\n        <ul style={styles.optionList}>\r\n          <TextNode\r\n            selected={option.selected} \r\n            label={option.name} \r\n            onChange={() => handleCheckboxClicked(option.id)}\r\n            handleTextChange={(event) => handleChange(event.target.value, option.id)}\r\n            handleAdd={() => handleAdd(index)}\r\n            handleAddSub={() => handleAddSub(option.id)}\r\n            handleDelete={() => handleDelete(option.id)}\r\n            handleReturn={(e) => handleReturn(e, index)}\r\n            myRef={this.textInput[index]}\r\n            isMaxNew={this.state.isLastNew}\r\n            nodeCount={getNodeCount(option.id)}\r\n           />\r\n          {/* Base Case */}\r\n          {(option.subOptions.length > 0 && option.selected === true) &&\r\n            <OptionsList\r\n              options={option.subOptions}\r\n              textChange={(subOptions) => handleSubOptionsTextChange(option.name, subOptions)}\r\n             />\r\n          }\r\n        </ul>\r\n      )}\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n  }\r\n}\r\n\r\nclass TextNode extends React.Component {\r\n  componentDidMount(){\r\n    if(this.props.isMaxNew === true){\r\n      this.props.myRef.current.focus()\r\n    }\r\n  }\r\n  render(){\r\n    const {    \r\n      selected, \r\n      label, \r\n      onChange, \r\n      handleTextChange,\r\n      handleAdd, \r\n      handleAddSub, \r\n      handleDelete,\r\n      handleReturn,\r\n      nodeCount,\r\n      myRef\r\n    } = this.props;\r\n    return(\r\n      <div style={styles.textNode}>\r\n        <Checkbox\r\n          checked={selected}\r\n          onChange={onChange}\r\n          color=\"primary\"\r\n        />\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked = {selected}\r\n          onClick={onChange} \r\n        />  */}\r\n        {/* <input \r\n          style={styles.nodeText}\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          ref={myRef}\r\n        /> */}\r\n        <TextField\r\n          style={styles.nodeText}\r\n          InputProps={{\r\n            disableUnderline: true\r\n         }}\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          inputRef={myRef}\r\n          multiline\r\n        />\r\n        {/* <textarea\r\n          style={styles.nodeText}\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          ref={myRef}\r\n        /> */}\r\n        <label style={{\r\n          display:'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          border: '1px #ccc solid'\r\n        }}>\r\n          {nodeCount}\r\n        </label>\r\n        <IconButton\r\n          onClick={handleAddSub} \r\n        >\r\n          <AddCircleIcon/>\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleDelete} \r\n        >\r\n          <HighlightOffIcon/>\r\n        </IconButton>\r\n        {/* <input\r\n          style={styles.addSubButton}\r\n          value=\"+\"\r\n          type=\"button\"\r\n          onClick={handleAddSub} \r\n        />\r\n        <input\r\n          style={styles.deleteSubButton}\r\n          value=\"-\"\r\n          type=\"button\"\r\n          onClick={handleDelete} \r\n        />  */}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TreeTest;","import React, { Component } from 'react';\n// import TreeTest from './components/TreeTest';\n// import TreeTest2 from './components/TreeTest2';\n// import TreeTest3 from './components/TreeTest3';\nimport TreeTest6 from './components/TreeTest6';\n\nclass App extends Component {\n\n  state = { count: 0 }\n\n\n  render() {\n    return (\n      <div>\n        <TreeTest6 />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}