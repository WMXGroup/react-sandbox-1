{"version":3,"sources":["components/TextNode.js","components/OptionList.js","components/TreeView.js","App.js","index.js"],"names":["TextNode","this","props","isMaxNew","myRef","current","focus","_this$props","classes","selected","label","onChange","handleTextChange","handleAddSub","handleDelete","handleReturn","nodeCount","react_default","a","createElement","className","nodeContainer","Badge","badgeContent","color","anchorOrigin","vertical","horizontal","Checkbox","checked","checkbox","size","TextField","nodeText","InputProps","disableUnderline","style","padding","value","onKeyPress","inputRef","multiline","IconButton","onClick","AddCircle_default","addButton","HighlightOff_default","deleteButton","React","Component","withStyles","theme","optionList","margin","borderLeft","display","width","borderBottom","fontSize","justifyContent","alignItems","height","OptionList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLastNew","textInput","_this2","options","textChange","i","length","push","createRef","handleSubOptionsTextChange","optionId","subOptions","id","uuidv4","Math","random","toString","substring","Date","now","handleAdd","index","newOption","name","depth","splice","getNodeCount","optionCount","Fragment","map","option","paddingLeft","components_TextNode","handleCheckboxClicked","event","newValue","handleChange","target","newSubOption","window","confirm","concat","e","key","preventDefault","undefined","setState","count","styles","buttonContainer","buttonStyle","textAlign","treeContainer","maxWidth","optionsContainer","TreeView","selectedFile","isLoading","componentDidMount","getServerData","search","location","listId","URLSearchParams","get","axios","then","res","data","list","saveData","post","alert","getLSData","retrievedStorage","localStorage","getItem","setItem","JSON","stringify","parse","downloadFile","content","fileName","contentType","document","file","Blob","type","href","URL","createObjectURL","download","click","writeToLS","newData","exportJSON","getFile","files","reader","FileReader","readAsText","onload","result","createNew","newId","_id","createBaseNode","accept","htmlFor","Button","variant","component","components_OptionList","createMuiTheme","palette","primary","blue","typography","overrides","MuiBadge","badge","minWidth","colorPrimary","backgroundColor","App","ThemeProvider","components_TreeView","ReactDOM","render","src_App","getElementById"],"mappings":"6RA8CMA,+LAEyB,IAAxBC,KAAKC,MAAMC,UACZF,KAAKC,MAAME,MAAMC,QAAQC,yCAGrB,IAAAC,EAeFN,KAAKC,MAbPM,EAFID,EAEJC,QACAC,EAHIF,EAGJE,SACAC,EAJIH,EAIJG,MACAC,EALIJ,EAKJI,SACAC,EANIL,EAMJK,iBACAC,EAPIN,EAOJM,aACAC,EARIP,EAQJO,aACAC,EATIR,EASJQ,aACAC,EAVIT,EAUJS,UACAZ,EAXIG,EAWJH,MAKF,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAWZ,EAAQa,eACtBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,aAAcP,EACdQ,MAAM,UACNC,aAAc,CACZC,SAAU,MACVC,WAAY,SAGdV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,QAASpB,EACTW,UAAWZ,EAAQsB,SACnBnB,SAAUA,EACVa,MAAM,UACNO,KAAK,WAGTd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEZ,UAAWZ,EAAQyB,SACnBC,WAAY,CACVC,kBAAkB,EAClBC,MAAO,CACLC,QAAS,IAGbC,MAAO5B,EACPC,SAAUC,EACV2B,WAAYxB,EACZyB,SAAUpC,EACVqC,WAAS,IAcXxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEC,QAAS9B,EACTkB,KAAK,SAELd,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACEE,UAAWZ,EAAQqC,aAGvB5B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEC,QAAS7B,EACTiB,KAAK,SAELd,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACEE,UAAWZ,EAAQuC,wBA/ERC,IAAMC,WAuFdC,cA5HA,SAACC,GAAD,MAAY,CACzBC,WAAW,CACTC,OAAQ,GAEVhC,cAAc,CACZiC,WAAY,kBACZC,QAAQ,QAEVtB,SAAS,CACPuB,MAAM,QACNC,aAAc,mBAEhBZ,UAAU,CACRa,SAAU,OACVlC,MAAO,SAETuB,aAAa,CACXW,SAAU,OACVlC,MAAO,OAETR,UAAU,CACR2C,eAAgB,SAChBC,WAAY,UAEd9B,SAAS,CACP+B,OAAQ,EACRL,MAAO,SAkGIN,CAAmBlD,GCgDnB8D,cAjLb,SAAAA,EAAY5D,GAAO,IAAA6D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA/D,KAAA6D,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA/D,KAAA+D,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnE,KAAMC,KAIRmE,MAAQ,CACNC,WAAY,GAJZP,EAAKQ,UAAY,GAFAR,wEASX,IAAAS,EAAAvE,KAAAM,EAC0BN,KAAKC,MAA7BuE,EADFlE,EACEkE,QAASC,EADXnE,EACWmE,WAEjBzE,KAAKsE,UAAY,GAEjB,IAAI,IAAII,EAAE,EAAGA,EAAEF,EAAQG,OAAQD,IAC7B1E,KAAKsE,UAAUM,KAAK7B,IAAM8B,aAE5B,IAmBMC,EAA6B,SAACC,EAAUC,GAC5C,IAAI,IAAIN,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGO,KAAOF,IACnBP,EAAQE,GAAGM,WAAaA,GAG5BP,EAAWD,IAGPU,EAAS,WACb,OAAOC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAKC,KAAKC,MAAMH,SAAS,KAGjEI,EAAY,SAACC,GACjB,IAAMC,EAAY,CAChBC,KAAK,GACLX,GAAIC,IACJF,WAAY,GACZxE,UAAU,EACVqF,MAAOrB,EAAQkB,GAAOG,OAGxBrB,EAAQsB,OAAOJ,EAAM,EAAG,EAAGC,GAC3BlB,EAAWD,IAwDPuB,EAAe,SAAChB,GAEpB,IADA,IAAIiB,EAAc,EACVtB,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGO,KAAOF,IACnBiB,EAAcxB,EAAQE,GAAGM,WAAWL,QAGxC,OAAOqB,GAeT,OACEhF,EAAAC,EAAAC,cAACF,EAAAC,EAAMgF,SAAP,KACCzB,EAAQ0B,IAAI,SAACC,EAAQT,GACpB,OACA1E,EAAAC,EAAAC,cAAA,MAAIiB,MAAO,CACTiB,OAAQ,EACRgD,YAA8B,IAAjBD,EAAON,MAAc,EAAI,OACtCxC,WAA6B,IAAjB8C,EAAON,MAAa,OAAQ,oBAExC7E,EAAAC,EAAAC,cAACmF,EAAD,CACE7F,SAAU2F,EAAO3F,SACjBC,MAAO0F,EAAOP,KACdlF,SAAU,kBApIY,SAACqE,GAC7B,IAAI,IAAIL,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGO,KAAOF,IACnBP,EAAQE,GAAGlE,UAAYgE,EAAQE,GAAGlE,UAGtCiE,EAAWD,GA8HW8B,CAAsBH,EAAOlB,KAC7CtE,iBAAkB,SAAC4F,GAAD,OA5HL,SAACC,EAAUzB,GAE9B,IAAI,IAAIL,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGO,KAAOF,IACnBP,EAAQE,GAAGkB,KAAOY,GAGtB/B,EAAWD,GAqHwBiC,CAAaF,EAAMG,OAAOrE,MAAO8D,EAAOlB,KACrEQ,UAAW,kBAAMA,EAAUC,IAC3B9E,aAAc,kBA1FD,SAACmE,GAQpB,IAPA,IAAM4B,EAAe,CACnBf,KAAK,GACLX,GAAIC,IACJF,WAAY,GACZxE,UAAU,GAGJkE,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGO,KAAOF,IACnB4B,EAAad,MAAQrB,EAAQE,GAAGmB,MAAQ,EACxCrB,EAAQE,GAAGM,WAAWJ,KAAK+B,GAC3BnC,EAAQE,GAAGlE,UAAW,GAG1BiE,EAAWD,GA2Ee5D,CAAauF,EAAOlB,KACxCpE,aAAc,WAAW+F,OAAOC,QAAP,oCAAAC,OAAmDX,EAAOP,KAA1D,QAzEZ,SAACb,GACpB,IAAI,IAAIL,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGO,KAAOF,GACnBP,EAAQsB,OAAOpB,EAAG,GAGtBD,EAAWD,GAmEyF3D,CAAasF,EAAOlB,KAClHnE,aAAc,SAACiG,GAAD,OAjED,SAACA,EAAGrB,GACV,UAAVqB,EAAEC,MACHD,EAAEE,iBACFxB,EAAUC,QACmBwB,IAA5B3C,EAAKD,UAAUoB,EAAM,IACtBnB,EAAK4C,SAAS,CACZ9C,WAAW,IAEbE,EAAKD,UAAUoB,EAAM,GAAGtF,QAAQC,SAEhCkE,EAAK4C,SAAS,CACZ9C,WAAW,KAsDYvD,CAAaiG,EAAGrB,IACrCvF,MAAOoE,EAAKD,UAAUoB,GACtBxF,SAAUqE,EAAKH,MAAMC,UACrBtD,UAAWgF,EAAaI,EAAOlB,IAC/BmC,MAAOjB,EAAOiB,QAKdjB,EAAOnB,WAAWL,OAAS,IAAyB,IAApBwB,EAAO3F,UACvCQ,EAAAC,EAAAC,cAAC2C,EAAD,CACEW,QAAS2B,EAAOnB,WAChBP,WAAY,SAACO,GAAD,OAAgBF,EAA2BqB,EAAOlB,GAAID,iBAvKvDjC,IAAMC,qCCEzBqE,EAAS,CACbC,gBAAgB,CACdhE,QAAS,QAEXiE,YAAa,CACXnF,QAAS,MACTgB,OAAQ,MACRoE,UAAW,UAEbC,cAAe,CACbC,SAAU,SAEZC,iBAAiB,IAuNJC,6MA/MbxD,MAAQ,CACNI,QAAS,GACTqD,aAAc,KACdC,WAAW,KAGbC,kBAAoB,WAClBjE,EAAKkE,mBASPA,cAAgB,WACd,IAAIC,EAASrB,OAAOsB,SAASD,OAEzBE,EADS,IAAIC,gBAAgBH,GACbI,IAAI,cAEVnB,IAAXiB,GAAmC,OAAXA,GACzBG,IACCD,IADD,sDAAAvB,OAC2DqB,IAC1DI,KAAK,SAAAC,GAAG,OAAI1E,EAAKqD,SAAS,CACzB3C,QAASgE,EAAIC,KAAKC,YAMxBC,SAAW,WACT,IAAIV,EAASrB,OAAOsB,SAASD,OAEzBE,EADS,IAAIC,gBAAgBH,GACbI,IAAI,SAExBC,IACCM,KADD,6DAAA9B,OACmEqB,GAAU,CAC3EO,KAAM5E,EAAKM,MAAMI,UAElB+D,KAAK,WACJM,MAAM,iCAIVC,UAAY,WACV,IAAMC,EAAmBC,aAAaC,QAAQ,cAa9C,OAZwB,OAArBF,GAA6BA,IAAqB,IACnDC,aAAaE,QAAQ,aAAcC,KAAKC,UAAU,CAChD,CACIxD,KAAM,aACNX,GAAI,EACJzE,UAAU,EACVwE,WAAY,GACZa,MAAO,MAKPsD,KAAKE,MAAML,aAAaC,QAAQ,kBAG1CK,aAAe,SAACC,EAASC,EAAUC,GACjC,IAAMxI,EAAIyI,SAASxI,cAAc,KAC3ByI,EAAO,IAAIC,KAAK,CAACL,GAAU,CAAEM,KAAMJ,IACzCxI,EAAE6I,KAAOC,IAAIC,gBAAgBL,GAC7B1I,EAAEgJ,SAAWT,EACbvI,EAAEiJ,WAGJC,UAAY,SAACC,GACXpB,aAAaE,QAAQ,aAAcC,KAAKC,UAAUgB,OAGpDC,WAAa,WACXvG,EAAKwF,aAAaH,KAAKC,UAAUtF,EAAKM,MAAMI,SAAU,YAAa,iBAGrE8F,QAAU,SAACvD,GACT,IAAIwD,EAAQxD,EAAEL,OAAO6D,MACjBC,EAAS,IAAIC,WACjBD,EAAOE,WAAWH,EAAM,IAExBC,EAAOG,OAAS,SAAA5D,GACdiC,aAAaE,QAAQ,aAAcnC,EAAEL,OAAOkE,QAC5C9G,EAAKqD,SAAS,CACZ3C,QAAS2E,KAAKE,MAAMtC,EAAEL,OAAOkE,cAKnCC,UAAY,WAUVvC,IACCM,KADD,yDACgE,CAC9DF,KAVF,CAAC,CACC9C,KAAM,aACNX,GAAI,EACJzE,UAAU,EACVwE,WAAY,GACZa,MAAO,MAOR0C,KAAK,SAACC,GAEL,OADAK,MAAM,qBACCL,IAERD,KAAK,SAACC,GACL,IAAMsC,EAAQtC,EAAIC,KAAKsC,IAEjB9J,EAAIyI,SAASxI,cAAc,KACjCD,EAAE6I,KAAF,qDAAAhD,OAA8DgE,GAC9D7J,EAAEiJ,aAINc,eAAiB,WAWflH,EAAKqD,SAAS,CACZ3C,QAVF,CAAC,CACCoB,KAAM,aACNX,GAAI,EACJzE,UAAU,EACVwE,WAAY,GACZa,MAAO,+EASF,IAAAtB,EAAAvE,KAMN,OACEgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,MAAOkF,EAAOC,iBAClBtG,EAAAC,EAAAC,cAAA,SACE2I,KAAK,OACL1H,MAAO,CAAEmB,QAAS,QAClB2B,GAAG,qBACHW,KAAK,OACLlF,SAAUV,KAAKsK,QACfW,OAAO,UAEPjK,EAAAC,EAAAC,cAAA,SAAOgK,QAAQ,sBACblK,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CACEhJ,MAAOkF,EAAOE,YACd6D,QAAQ,YACR7J,MAAM,UACN8J,UAAU,QAJZ,gBAQJrK,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CACEhJ,MAAOkF,EAAOE,YACd6D,QAAQ,YACR1I,QAAS,kBAAM6B,EAAK8F,cACpB9I,MAAM,WAJR,eAOAP,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CACEhJ,MAAOkF,EAAOE,YACd6D,QAAQ,YACR1I,QAAS,kBAAM6B,EAAKoE,YACpBpH,MAAM,WAJR,aAOAP,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CACEhJ,MAAOkF,EAAOE,YACd6D,QAAQ,YACR1I,QAAS,kBAAM6B,EAAKsG,aACpBtJ,MAAM,WAJR,eAQ8B,IAA9BvB,KAAKoE,MAAMI,QAAQG,QACpB3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CACChJ,MAAOkF,EAAOE,YACd6D,QAAQ,YACR1I,QAAS,kBAAM6B,EAAKyG,kBACpBzJ,MAAM,WAJP,kBASHP,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKiB,MAAOkF,EAAOI,eACjBzG,EAAAC,EAAAC,cAAA,OAAKiB,MAAOkF,EAAOM,kBACjB3G,EAAAC,EAAAC,cAACoK,EAAD,CACI9G,QAASxE,KAAKoE,MAAMI,QACpBC,WAAY,SAACD,GAAD,OAAaD,EAAK4C,SAAS,CAAC3C,yBAvMjCzB,IAAMC,oCClBvBE,EAAQqI,YAAe,CAC3BC,QAAS,CACPC,QAASC,KAEXC,WAAY,GAGZC,UAAW,CACTC,SAAU,CACRC,MAAO,CACLlI,OAAQ,GACRmI,SAAU,GACV3J,QAAS,GAGX4J,aAAc,CACZC,gBAAiB,YAmBVC,6MAXb9H,MAAQ,CAAEgD,MAAO,2EAGf,OACEpG,EAAAC,EAAAC,cAACiL,EAAA,EAAD,CAAejJ,MAAOA,GAClBlC,EAAAC,EAAAC,cAACkL,EAAD,cAPQpJ,aCxBlBqJ,IAASC,OAAOtL,EAAAC,EAAAC,cAACqL,EAAD,MAAS7C,SAAS8C,eAAe","file":"static/js/main.fd86d791.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = (theme) => ({\r\n  optionList:{\r\n    margin: 0,\r\n  },\r\n  nodeContainer:{\r\n    borderLeft: '1px dashed #ccc',\r\n    display:'flex',\r\n  },\r\n  nodeText:{\r\n    width:'700px',\r\n    borderBottom: '1px dashed #ccc'\r\n  },\r\n  addButton:{\r\n    fontSize: '17px',\r\n    color: 'green'\r\n  },\r\n  deleteButton:{\r\n    fontSize: '17px',\r\n    color: 'red',\r\n  },\r\n  nodeCount:{\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  checkbox:{\r\n    height: 0,\r\n    width: '5px'\r\n  },\r\n  // valueCount:{\r\n  //   justifyContent: 'center',\r\n  //   alignItems: 'center',\r\n  //   border: '1px solid #ccc',\r\n  //   width:'50px',\r\n  //   height: '20px'\r\n  // }\r\n});\r\n\r\nclass TextNode extends React.Component {\r\n  componentDidMount(){\r\n    if(this.props.isMaxNew === true){\r\n      this.props.myRef.current.focus()\r\n    }\r\n  }\r\n  render(){\r\n    const {\r\n      classes,    \r\n      selected, \r\n      label, \r\n      onChange, \r\n      handleTextChange,\r\n      handleAddSub, \r\n      handleDelete,\r\n      handleReturn,\r\n      nodeCount,\r\n      myRef,\r\n      // count,\r\n      // handleCountChange,\r\n      // subCount\r\n    } = this.props;\r\n    return(\r\n      <div className={classes.nodeContainer}>\r\n        <Badge\r\n          badgeContent={nodeCount}\r\n          color='primary'\r\n          anchorOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'left',\r\n          }}\r\n          >\r\n          <Checkbox\r\n            checked={selected}\r\n            className={classes.checkbox}\r\n            onChange={onChange}\r\n            color=\"primary\"\r\n            size='small'\r\n          />\r\n        </Badge>\r\n        <TextField\r\n          className={classes.nodeText}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n            style: {\r\n              padding: 0,\r\n            }\r\n          }}\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          inputRef={myRef}\r\n          multiline\r\n        />\r\n        {/* <TextField\r\n          className={classes.valueCount}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n            style: {\r\n              padding: 0,\r\n            }\r\n          }}\r\n          onChange={handleCountChange}\r\n          value={subCount === 0 ? count : subCount}\r\n          disabled={subCount === 0 ? false: true}\r\n        /> */}\r\n        <IconButton\r\n          onClick={handleAddSub}\r\n          size='small'\r\n        >\r\n          <AddCircleIcon\r\n            className={classes.addButton}\r\n          />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleDelete} \r\n          size='small'\r\n        >\r\n          <HighlightOffIcon\r\n            className={classes.deleteButton}\r\n          />\r\n        </IconButton>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(TextNode)","import React from 'react';\r\nimport TextNode from './TextNode';\r\n\r\nclass OptionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = []\r\n  }\r\n\r\n  state = {\r\n    isLastNew : false,\r\n  }\r\n\r\n  render(){\r\n    const { options, textChange } = this.props;\r\n\r\n    this.textInput = [];\r\n\r\n    for(let i=0; i<options.length; i++){\r\n      this.textInput.push(React.createRef());\r\n    }\r\n    const handleCheckboxClicked = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].selected = !options[i].selected\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n    \r\n    const handleChange = (newValue, optionId) => {\r\n      ('handle Change triggered')\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].name = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n  \r\n    const handleSubOptionsTextChange = (optionId, subOptions) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].subOptions = subOptions\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n\r\n    const uuidv4 = () => {\r\n      return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n    }\r\n  \r\n    const handleAdd = (index) => {\r\n      const newOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n        selected: false,\r\n        depth: options[index].depth,\r\n        // count: 0\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleAddSub = (optionId) => {\r\n      const newSubOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n        selected: false,\r\n        // count: 0\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          newSubOption.depth = options[i].depth + 1\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleDelete = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options.splice(i, 1)\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleReturn = (e, index) => {\r\n      if(e.key === 'Enter'){\r\n        e.preventDefault()\r\n        handleAdd(index);\r\n      if(this.textInput[index+1] !== undefined){\r\n        this.setState({\r\n          isLastNew: false\r\n        })\r\n        this.textInput[index+1].current.focus()\r\n      } else{\r\n        this.setState({\r\n          isLastNew: true\r\n        })\r\n      }\r\n      }\r\n    }\r\n\r\n    const handleCountChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].count = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n\r\n    const getNodeCount = (optionId) => {\r\n      let optionCount = 0;\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          optionCount = options[i].subOptions.length\r\n        }\r\n      }\r\n      return optionCount;\r\n    }\r\n\r\n    // const getSubOptionCount = (optionId) => {\r\n    //   let subCount = 0;\r\n    //   for(let i=0;i<options.length;i++){\r\n    //     if(options[i].id === optionId){\r\n    //       for(let j=0;j<options[i].subOptions.length;j++){\r\n    //         subCount = subCount + parseInt(options[i].subOptions[j].count)\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //   return subCount;\r\n    // }\r\n\r\n    return(\r\n      <React.Fragment>\r\n      {options.map((option, index) => {\r\n        return (\r\n        <ul style={{\r\n          margin: 0,\r\n          paddingLeft: option.depth === 0 ? 0 : '20px',\r\n          borderLeft: option.depth === 0 ?'none': '1px #ccc dashed'\r\n        }}>\r\n          <TextNode\r\n            selected={option.selected} \r\n            label={option.name} \r\n            onChange={() => handleCheckboxClicked(option.id)}\r\n            handleTextChange={(event) => handleChange(event.target.value, option.id)}\r\n            handleAdd={() => handleAdd(index)}\r\n            handleAddSub={() => handleAddSub(option.id)}\r\n            handleDelete={() => {if (window.confirm(`Are you sure you want to delete \"${option.name}\"?`)) handleDelete(option.id)}}\r\n            handleReturn={(e) => handleReturn(e, index)}\r\n            myRef={this.textInput[index]}\r\n            isMaxNew={this.state.isLastNew}\r\n            nodeCount={getNodeCount(option.id)}\r\n            count={option.count}\r\n            // handleCountChange={(event) => handleCountChange(event.target.value, option.id)}\r\n            // subCount={getSubOptionCount(option.id)}\r\n           />\r\n          {/* Base Case */}\r\n          {(option.subOptions.length > 0 && option.selected === true) &&\r\n            <OptionList\r\n              options={option.subOptions}\r\n              textChange={(subOptions) => handleSubOptionsTextChange(option.id, subOptions)}\r\n             />\r\n          }\r\n        </ul>\r\n      )}\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n  }\r\n}\r\n\r\nexport default OptionList;","import React from 'react';\nimport OptionList from './OptionList';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\n\nconst styles = {\n  buttonContainer:{\n    display: 'flex',\n  },\n  buttonStyle: {\n    padding: '8px',\n    margin: '3px',\n    textAlign: 'center',\n  },\n  treeContainer: {\n    maxWidth: '700px'\n  },\n  optionsContainer:{\n    // border: '1px solid red',\n    // display: 'flex',\n    // flexBasis: '100%'\n  }\n}\n\nclass TreeView extends React.Component {    \n  state = {\n    options: [],\n    selectedFile: null,\n    isLoading: true\n  }\n\n  componentDidMount = () => {\n    this.getServerData();\n    // const treeData = this.getLSData();\n    \n    // this.setState({\n    //   options: treeData,\n    //   isLoading: false\n    // })\n  }\n\n  getServerData = () => {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let listId = params.get('query');\n\n    if(listId !== undefined && listId !== null){\n      axios\n      .get(`https://guarded-mesa-76047.herokuapp.com/api/lists/${listId}`)\n      .then(res => this.setState({ \n        options: res.data.list\n        \n      }));\n    }\n  }\n\n  saveData = () => {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let listId = params.get('query');\n\n    axios\n    .post(`https://guarded-mesa-76047.herokuapp.com/api/lists/update/${listId}`, {\n      list: this.state.options\n    })\n    .then(() => {\n      alert('Data saved successfully!')\n    });\n  }\n\n  getLSData = () => {\n    const retrievedStorage = localStorage.getItem('myTreeData');\n    if(retrievedStorage === null || retrievedStorage === []) {\n      localStorage.setItem('myTreeData', JSON.stringify([\n        {\n            name: \"Start Here\",\n            id: 1,\n            selected: false,\n            subOptions: [],\n            depth: 0\n          }\n        ]));\n    }\n\n    return (JSON.parse(localStorage.getItem('myTreeData')))\n  }\n\n  downloadFile = (content, fileName, contentType) => {\n    const a = document.createElement(\"a\");\n    const file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  writeToLS = (newData) => {\n    localStorage.setItem('myTreeData', JSON.stringify(newData));\n  };\n\n  exportJSON = () => {\n    this.downloadFile(JSON.stringify(this.state.options), \"data.json\", \"text/plain\");\n  }\n\n  getFile = (e) => {\n    let files = e.target.files;\n    let reader = new FileReader();\n    reader.readAsText(files[0]);\n\n    reader.onload = e => {\n      localStorage.setItem('myTreeData', e.target.result);\n      this.setState({\n        options: JSON.parse(e.target.result)\n      })\n    };\n  }\n\n  createNew = () => {\n    const newData = \n    [{\n      name: \"Start Here\",\n      id: 1,\n      selected: false,\n      subOptions: [],\n      depth: 0\n    }];\n\n    axios\n    .post(`https://guarded-mesa-76047.herokuapp.com/api/lists/new`, {\n      list: newData\n    })\n    .then((res) => {\n      alert('New list created!')\n      return(res);\n    })\n    .then((res) => {\n      const newId = res.data._id;\n\n      const a = document.createElement(\"a\");\n      a.href = `https://wmxgroup.github.io/react-sandbox-1/?query=${newId}`;\n      a.click();\n    });\n  }\n\n  createBaseNode = () => {\n    const newData = \n    [{\n      name: \"Start Here\",\n      id: 1,\n      selected: false,\n      subOptions: [],\n      depth: 0,\n      // count: 0\n    }];\n\n    this.setState({\n      options: newData\n    });\n  }\n\n  render() {\n\n    // if(this.state.isLoading === false){\n    //   this.writeToLS(this.state.options);\n    // }\n\n     return (\n       <div>\n         <div style={styles.buttonContainer}>\n          <input \n            type=\"file\"\n            style={{ display: 'none' }}\n            id=\"raised-button-file\"\n            name=\"file\" \n            onChange={this.getFile}\n            accept=\".json\"\n            />\n            <label htmlFor=\"raised-button-file\">\n              <Button \n                style={styles.buttonStyle}\n                variant=\"contained\"\n                color=\"primary\"\n                component=\"span\">\n                Import JSON\n              </Button>\n            </label>\n          <Button\n            style={styles.buttonStyle}\n            variant=\"contained\"\n            onClick={() => this.exportJSON()}\n            color=\"primary\"\n            >Export Data\n          </Button>\n          <Button\n            style={styles.buttonStyle}\n            variant=\"contained\"\n            onClick={() => this.saveData()}\n            color=\"primary\"\n            >Save Data\n          </Button>\n          <Button\n            style={styles.buttonStyle}\n            variant=\"contained\"\n            onClick={() => this.createNew()}\n            color=\"primary\"\n            >Create New\n          </Button>\n         </div>\n         {this.state.options.length === 0 &&\n         <div>\n           <Button\n            style={styles.buttonStyle}\n            variant=\"contained\"\n            onClick={() => this.createBaseNode()}\n            color=\"primary\"\n            >Add Base Node\n           </Button>\n         </div>\n        }\n        <h1>My Tree</h1>\n        <div style={styles.treeContainer}>\n          <div style={styles.optionsContainer}>\n            <OptionList \n                options={this.state.options}\n                textChange={(options) => this.setState({options})}\n              />\n          </div>\n        </div>\n       </div>\n     )\n  }\n}\n\nexport default TreeView;","import React, { Component } from 'react';\nimport TreeView from './components/TreeView';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { blue } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue\n  },\n  typography: {\n\n  },\n  overrides: {\n    MuiBadge: {\n      badge: {\n        height: 13,\n        minWidth: 13,\n        padding: 0,\n        \n      },\n      colorPrimary: {\n        backgroundColor: 'Navy'\n      }\n    },\n  },\n});\n\nclass App extends Component {\n\n  state = { count: 0 }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n          <TreeView />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}