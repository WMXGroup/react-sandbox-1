{"version":3,"sources":["components/TextNode.js","components/OptionList.js","components/TreeView.js","App.js","index.js"],"names":["TextNode","this","props","isMaxNew","myRef","current","focus","_this$props","classes","selected","label","onChange","handleTextChange","handleAddSub","handleDelete","handleReturn","nodeCount","react_default","a","createElement","className","nodeContainer","Checkbox","checked","checkbox","color","size","TextField","nodeText","InputProps","disableUnderline","style","padding","value","onKeyPress","inputRef","multiline","IconButton","onClick","AddCircle_default","addButton","HighlightOff_default","deleteButton","React","Component","withStyles","theme","optionList","margin","borderLeft","display","fontSize","justifyContent","alignItems","height","OptionList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLastNew","textInput","_this2","options","textChange","i","length","push","createRef","handleSubOptionsTextChange","optionName","subOptions","uuidv4","Math","random","toString","substring","Date","now","handleAdd","index","newOption","name","id","depth","splice","getNodeCount","optionId","optionCount","Fragment","map","option","paddingLeft","components_TextNode","handleCheckboxClicked","event","newValue","handleChange","target","newSubOption","e","key","preventDefault","undefined","setState","TreeView","selectedFile","isLoading","componentDidMount","treeData","getData","retrievedStorage","localStorage","getItem","setItem","JSON","stringify","parse","downloadFile","content","fileName","contentType","document","file","Blob","type","href","URL","createObjectURL","download","click","writeToLS","newData","exportJSON","getFile","files","reader","FileReader","readAsText","onload","result","accept","components_OptionList","createMuiTheme","palette","primary","blue","typography","App","count","ThemeProvider","components_TreeView","ReactDOM","render","src_App","getElementById"],"mappings":"oRAsCMA,+LAEyB,IAAxBC,KAAKC,MAAMC,UACZF,KAAKC,MAAME,MAAMC,QAAQC,yCAGrB,IAAAC,EAYFN,KAAKC,MAVPM,EAFID,EAEJC,QACAC,EAHIF,EAGJE,SACAC,EAJIH,EAIJG,MACAC,EALIJ,EAKJI,SACAC,EANIL,EAMJK,iBACAC,EAPIN,EAOJM,aACAC,EARIP,EAQJO,aACAC,EATIR,EASJQ,aACAC,EAVIT,EAUJS,UACAZ,EAXIG,EAWJH,MAEF,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAWZ,EAAQa,eACtBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,QAASd,EACTW,UAAWZ,EAAQgB,SACnBb,SAAUA,EACVc,MAAM,UACNC,KAAK,UAEPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEP,UAAWZ,EAAQoB,SACnBC,WAAY,CACVC,kBAAkB,EAClBC,MAAO,CACLC,QAAS,IAGbC,MAAOvB,EACPC,SAAUC,EACVsB,WAAYnB,EACZoB,SAAU/B,EACVgC,WAAS,IAEXnB,EAAAC,EAAAC,cAAA,SAAOC,UAAWZ,EAAQQ,WACvBA,GAEHC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,QAASzB,EACTa,KAAK,SAELT,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEE,UAAWZ,EAAQgC,aAGvBvB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,QAASxB,EACTY,KAAK,SAELT,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CACEE,UAAWZ,EAAQkC,wBA1DRC,IAAMC,WAkEdC,cAhGA,SAACC,GAAD,MAAY,CACzBC,WAAW,CACTC,OAAQ,GAEV3B,cAAc,CACZ4B,WAAY,iBACZC,QAAQ,QAGVtB,SAAS,GAGTY,UAAU,CACRW,SAAU,OACV1B,MAAO,SAETiB,aAAa,CACXS,SAAU,OACV1B,MAAO,OAETT,UAAU,CACRkC,QAAQ,OACRE,eAAgB,SAChBC,WAAY,UAEd7B,SAAS,CACP8B,OAAQ,KAsEGT,CAAmB7C,GC4CnBuD,cAhJb,SAAAA,EAAYrD,GAAO,IAAAsD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxD,KAAAsD,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxD,KAAAwD,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5D,KAAMC,KAIR4D,MAAQ,CACNC,WAAY,GAJZP,EAAKQ,UAAY,GAFAR,wEASX,IAAAS,EAAAhE,KAAAM,EAC0BN,KAAKC,MAA7BgE,EADF3D,EACE2D,QAASC,EADX5D,EACW4D,WAEjBlE,KAAK+D,UAAY,GAEjB,IAAI,IAAII,EAAE,EAAGA,EAAEF,EAAQG,OAAQD,IAC7BnE,KAAK+D,UAAUM,KAAK3B,IAAM4B,aAE5B,IAkBMC,EAA6B,SAACC,EAAYC,GAC9CR,EAAQO,GAAcC,EACtBP,EAAWD,IAGPS,EAAS,WACb,OAAOC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAKC,KAAKC,MAAMH,SAAS,KAGjEI,EAAY,SAACC,GACjB,IAAMC,EAAY,CAChBC,KAAK,GACLC,GAAIX,IACJD,WAAY,GACZa,MAAOrB,EAAQiB,GAAOI,OAExBrB,EAAQsB,OAAOL,EAAM,EAAG,EAAGC,GAC3BjB,EAAWD,IA6CPuB,EAAe,SAACC,GAEpB,IADA,IAAIC,EAAc,EACVvB,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGkB,KAAOI,IACnBC,EAAczB,EAAQE,GAAGM,WAAWL,QAGxC,OAAOsB,GAGT,OACE1E,EAAAC,EAAAC,cAACF,EAAAC,EAAM0E,SAAP,KACC1B,EAAQ2B,IAAI,SAACC,EAAQX,GACpB,OACAlE,EAAAC,EAAAC,cAAA,MAAIY,MAAO,CACTiB,OAAQ,EACR+C,YAA8B,IAAjBD,EAAOP,MAAc,EAAI,OACtCtC,WAA6B,IAAjB6C,EAAOP,MAAa,OAAQ,mBAExCtE,EAAAC,EAAAC,cAAC6E,EAAD,CACEvF,SAAUqF,EAAOrF,SACjBC,MAAOoF,EAAOT,KACd1E,SAAU,kBAtGY,SAAC+E,GAC7B,IAAI,IAAItB,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGkB,KAAOI,IACnBxB,EAAQE,GAAG3D,UAAYyD,EAAQE,GAAG3D,UAGtC0D,EAAWD,GAgGW+B,CAAsBH,EAAOR,KAC7C1E,iBAAkB,SAACsF,GAAD,OA9FL,SAACC,EAAUT,GAC9B,IAAI,IAAItB,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGkB,KAAOI,IACnBxB,EAAQE,GAAGiB,KAAOc,GAGtBhC,EAAWD,GAwFwBkC,CAAaF,EAAMG,OAAOpE,MAAO6D,EAAOR,KACrEJ,UAAW,kBAAMA,EAAUC,IAC3BtE,aAAc,kBAnED,SAAC6E,GAMpB,IALA,IAAMY,EAAe,CACnBjB,KAAK,GACLC,GAAIX,IACJD,WAAY,IAENN,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGkB,KAAOI,IACnBY,EAAaf,MAAQrB,EAAQE,GAAGmB,MAAQ,EACxCrB,EAAQE,GAAGM,WAAWJ,KAAKgC,GAC3BpC,EAAQE,GAAG3D,UAAW,GAG1B0D,EAAWD,GAsDerD,CAAaiF,EAAOR,KACxCxE,aAAc,kBApDD,SAAC4E,GACpB,IAAI,IAAItB,EAAE,EAAEA,EAAEF,EAAQG,OAAOD,IACxBF,EAAQE,GAAGkB,KAAOI,GACnBxB,EAAQsB,OAAOpB,EAAG,GAGtBD,EAAWD,GA8CepD,CAAagF,EAAOR,KACxCvE,aAAc,SAACwF,GAAD,OA5CD,SAACA,EAAGpB,GACV,UAAVoB,EAAEC,MACHD,EAAEE,iBACFvB,EAAUC,QACmBuB,IAA5BzC,EAAKD,UAAUmB,EAAM,IACtBlB,EAAK0C,SAAS,CACZ5C,WAAW,IAEbE,EAAKD,UAAUmB,EAAM,GAAG9E,QAAQC,SAEhC2D,EAAK0C,SAAS,CACZ5C,WAAW,KAiCYhD,CAAawF,EAAGpB,IACrC/E,MAAO6D,EAAKD,UAAUmB,GACtBhF,SAAU8D,EAAKH,MAAMC,UACrB/C,UAAWyE,EAAaK,EAAOR,MAG/BQ,EAAOpB,WAAWL,OAAS,IAAyB,IAApByB,EAAOrF,UACvCQ,EAAAC,EAAAC,cAACoC,EAAD,CACEW,QAAS4B,EAAOpB,WAChBP,WAAY,SAACO,GAAD,OAAgBF,EAA2BsB,EAAOT,KAAMX,iBAtIzD/B,IAAMC,WC0FhBgE,6MAzFb9C,MAAQ,CACNI,QAAS,GACT2C,aAAc,KACdC,WAAW,KAGbC,kBAAoB,WAClB,IAAMC,EAAWxD,EAAKyD,UAEtBzD,EAAKmD,SAAS,CACZzC,QAAS8C,EACTF,WAAW,OAIfG,QAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQ,cAa9C,OAZwB,OAArBF,GAA6BA,IAAqB,IACnDC,aAAaE,QAAQ,aAAcC,KAAKC,UAAU,CAChD,CACIlC,KAAM,aACNC,GAAI,EACJ7E,UAAU,EACViE,WAAY,GACZa,MAAO,MAKP+B,KAAKE,MAAML,aAAaC,QAAQ,kBAG1CK,aAAe,SAACC,EAASC,EAAUC,GACjC,IAAM1G,EAAI2G,SAAS1G,cAAc,KAC3B2G,EAAO,IAAIC,KAAK,CAACL,GAAU,CAAEM,KAAMJ,IACzC1G,EAAE+G,KAAOC,IAAIC,gBAAgBL,GAC7B5G,EAAEkH,SAAWT,EACbzG,EAAEmH,WAGJC,UAAY,SAACC,GACXpB,aAAaE,QAAQ,aAAcC,KAAKC,UAAUgB,OAGpDC,WAAa,WACXhF,EAAKiE,aAAaH,KAAKC,UAAU/D,EAAKM,MAAMI,SAAU,YAAa,iBAGrEuE,QAAU,SAAClC,GACT,IAAImC,EAAQnC,EAAEF,OAAOqC,MACjBC,EAAS,IAAIC,WACjBD,EAAOE,WAAWH,EAAM,IAExBC,EAAOG,OAAS,SAAAvC,GACdY,aAAaE,QAAQ,aAAcd,EAAEF,OAAO0C,QAC5CvF,EAAKmD,SAAS,CACZzC,QAASoD,KAAKE,MAAMjB,EAAEF,OAAO0C,oFAK1B,IAAA9E,EAAAhE,KAMN,OAJ2B,IAAzBA,KAAK6D,MAAMgD,WACZ7G,KAAKqI,UAAUrI,KAAK6D,MAAMI,SAIzBjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,4CAEDF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO6G,KAAK,OAAO3C,KAAK,OAAO1E,SAAUV,KAAKwI,QAASO,OAAO,WAEhE/H,EAAAC,EAAAC,cAAA,UACCmB,QAAS,kBAAM2B,EAAKuE,eADrB,eAIAvH,EAAAC,EAAAC,cAAA,qBACCF,EAAAC,EAAAC,cAAC8H,EAAD,CACE/E,QAASjE,KAAK6D,MAAMI,QACpBC,WAAY,SAACD,GAAD,OAAaD,EAAK0C,SAAS,CAACzC,uBAnF7BvB,IAAMC,mCCGvBE,EAAQoG,YAAe,CAC3BC,QAAS,CACPC,QAASC,KAEXC,WAAY,KAkBCC,6MAXbzF,MAAQ,CAAE0F,MAAO,2EAGf,OACEvI,EAAAC,EAAAC,cAACsI,EAAA,EAAD,CAAe3G,MAAOA,GACpB7B,EAAAC,EAAAC,cAACuI,EAAD,cAPU9G,aCXlB+G,IAASC,OAAO3I,EAAAC,EAAAC,cAAC0I,EAAD,MAAShC,SAASiC,eAAe","file":"static/js/main.e4997711.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = (theme) => ({\r\n  optionList:{\r\n    margin: 0,\r\n  },\r\n  nodeContainer:{\r\n    borderLeft: '1px solid #ccc',\r\n    display:'flex',\r\n    // flex: 1,\r\n  },\r\n  nodeText:{\r\n    // border: 'none',\r\n  },\r\n  addButton:{\r\n    fontSize: '17px',\r\n    color: 'green',\r\n  },\r\n  deleteButton:{\r\n    fontSize: '17px',\r\n    color: 'red',\r\n  },\r\n  nodeCount:{\r\n    display:'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  checkbox:{\r\n    height: 0\r\n  },\r\n});\r\n\r\nclass TextNode extends React.Component {\r\n  componentDidMount(){\r\n    if(this.props.isMaxNew === true){\r\n      this.props.myRef.current.focus()\r\n    }\r\n  }\r\n  render(){\r\n    const {\r\n      classes,    \r\n      selected, \r\n      label, \r\n      onChange, \r\n      handleTextChange,\r\n      handleAddSub, \r\n      handleDelete,\r\n      handleReturn,\r\n      nodeCount,\r\n      myRef\r\n    } = this.props;\r\n    return(\r\n      <div className={classes.nodeContainer}>\r\n        <Checkbox\r\n          checked={selected}\r\n          className={classes.checkbox}\r\n          onChange={onChange}\r\n          color=\"primary\"\r\n          size='small'\r\n        />\r\n        <TextField\r\n          className={classes.nodeText}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n            style: {\r\n              padding: 0,\r\n            }\r\n          }}\r\n          value={label}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleReturn}\r\n          inputRef={myRef}\r\n          multiline\r\n        />\r\n        <label className={classes.nodeCount}>\r\n          {nodeCount}\r\n        </label>\r\n        <IconButton\r\n          onClick={handleAddSub}\r\n          size='small'\r\n        >\r\n          <AddCircleIcon\r\n            className={classes.addButton}\r\n          />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleDelete} \r\n          size='small'\r\n        >\r\n          <HighlightOffIcon\r\n            className={classes.deleteButton}\r\n          />\r\n        </IconButton>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(TextNode)","import React from 'react';\r\nimport TextNode from './TextNode';\r\n\r\nclass OptionList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = []\r\n  }\r\n\r\n  state = {\r\n    isLastNew : false,\r\n  }\r\n\r\n  render(){\r\n    const { options, textChange } = this.props;\r\n\r\n    this.textInput = [];\r\n\r\n    for(let i=0; i<options.length; i++){\r\n      this.textInput.push(React.createRef());\r\n    }\r\n    const handleCheckboxClicked = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].selected = !options[i].selected\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n    \r\n    const handleChange = (newValue, optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options[i].name = newValue\r\n        }\r\n      }\r\n      textChange(options);\r\n    }\r\n  \r\n    const handleSubOptionsTextChange = (optionName, subOptions) => {\r\n      options[optionName] = subOptions\r\n      textChange(options);\r\n    }\r\n\r\n    const uuidv4 = () => {\r\n      return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n    }\r\n  \r\n    const handleAdd = (index) => {\r\n      const newOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n        depth: options[index].depth\r\n      }\r\n      options.splice(index+1, 0, newOption )\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleAddSub = (optionId) => {\r\n      const newSubOption = {\r\n        name:\"\",\r\n        id: uuidv4(),\r\n        subOptions: [],\r\n      }\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          newSubOption.depth = options[i].depth + 1\r\n          options[i].subOptions.push(newSubOption)\r\n          options[i].selected = true\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleDelete = (optionId) => {\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          options.splice(i, 1)\r\n        }\r\n      }\r\n      textChange(options)\r\n    }\r\n  \r\n    const handleReturn = (e, index) => {\r\n      if(e.key === 'Enter'){\r\n        e.preventDefault()\r\n        handleAdd(index);\r\n      if(this.textInput[index+1] !== undefined){\r\n        this.setState({\r\n          isLastNew: false\r\n        })\r\n        this.textInput[index+1].current.focus()\r\n      } else{\r\n        this.setState({\r\n          isLastNew: true\r\n        })\r\n      }\r\n      }\r\n    }\r\n\r\n    const getNodeCount = (optionId) => {\r\n      let optionCount = 0;\r\n      for(let i=0;i<options.length;i++){\r\n        if(options[i].id === optionId){\r\n          optionCount = options[i].subOptions.length\r\n        }\r\n      }\r\n      return optionCount;\r\n    }\r\n\r\n    return(\r\n      <React.Fragment>\r\n      {options.map((option, index) => {\r\n        return (\r\n        <ul style={{\r\n          margin: 0,\r\n          paddingLeft: option.depth === 0 ? 0 : '20px',\r\n          borderLeft: option.depth === 0 ?'none': '1px #ccc solid'\r\n        }}>\r\n          <TextNode\r\n            selected={option.selected} \r\n            label={option.name} \r\n            onChange={() => handleCheckboxClicked(option.id)}\r\n            handleTextChange={(event) => handleChange(event.target.value, option.id)}\r\n            handleAdd={() => handleAdd(index)}\r\n            handleAddSub={() => handleAddSub(option.id)}\r\n            handleDelete={() => handleDelete(option.id)}\r\n            handleReturn={(e) => handleReturn(e, index)}\r\n            myRef={this.textInput[index]}\r\n            isMaxNew={this.state.isLastNew}\r\n            nodeCount={getNodeCount(option.id)}\r\n           />\r\n          {/* Base Case */}\r\n          {(option.subOptions.length > 0 && option.selected === true) &&\r\n            <OptionList\r\n              options={option.subOptions}\r\n              textChange={(subOptions) => handleSubOptionsTextChange(option.name, subOptions)}\r\n             />\r\n          }\r\n        </ul>\r\n      )}\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n  }\r\n}\r\n\r\nexport default OptionList;","import React from 'react';\r\nimport OptionList from './OptionList';\r\n\r\nclass TreeView extends React.Component {    \r\n  state = {\r\n    options: [],\r\n    selectedFile: null,\r\n    isLoading: true\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const treeData = this.getData();\r\n\r\n    this.setState({\r\n      options: treeData,\r\n      isLoading: false\r\n    })\r\n  }\r\n\r\n  getData = () => {\r\n    const retrievedStorage = localStorage.getItem('myTreeData');\r\n    if(retrievedStorage === null || retrievedStorage === []) {\r\n      localStorage.setItem('myTreeData', JSON.stringify([\r\n        {\r\n            name: \"Start Here\",\r\n            id: 1,\r\n            selected: false,\r\n            subOptions: [],\r\n            depth: 0\r\n          }\r\n        ]));\r\n    }\r\n\r\n    return (JSON.parse(localStorage.getItem('myTreeData')))\r\n  }\r\n\r\n  downloadFile = (content, fileName, contentType) => {\r\n    const a = document.createElement(\"a\");\r\n    const file = new Blob([content], { type: contentType });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = fileName;\r\n    a.click();\r\n  }\r\n\r\n  writeToLS = (newData) => {\r\n    localStorage.setItem('myTreeData', JSON.stringify(newData));\r\n  };\r\n\r\n  exportJSON = () => {\r\n    this.downloadFile(JSON.stringify(this.state.options), \"data.json\", \"text/plain\");\r\n  }\r\n\r\n  getFile = (e) => {\r\n    let files = e.target.files;\r\n    let reader = new FileReader();\r\n    reader.readAsText(files[0]);\r\n\r\n    reader.onload = e => {\r\n      localStorage.setItem('myTreeData', e.target.result);\r\n      this.setState({\r\n        options: JSON.parse(e.target.result)\r\n      })\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    if(this.state.isLoading === false){\r\n      this.writeToLS(this.state.options);\r\n    }\r\n\r\n     return (\r\n       <div>\r\n         <div>\r\n          <label>Select Json file to import</label>\r\n         </div>\r\n         <div>\r\n           <input type=\"file\" name=\"file\" onChange={this.getFile} accept=\".json\"/>\r\n         </div>\r\n         <button\r\n          onClick={() => this.exportJSON()}\r\n          >Export Data\r\n         </button>\r\n         <h1>My Tree</h1>\r\n          <OptionList \r\n            options={this.state.options}\r\n            textChange={(options) => this.setState({options})}\r\n          />\r\n       </div>\r\n     )\r\n  }\r\n}\r\n\r\nexport default TreeView;","import React, { Component } from 'react';\nimport TreeView from './components/TreeView';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { blue } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue\n  },\n  typography: {\n\n  }\n});\n\nclass App extends Component {\n\n  state = { count: 0 }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <TreeView />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}